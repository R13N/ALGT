  # Examples/STFL.typesystem # 
 ##############################

 Syntax 
========

bool                ::= "True" | "False"
e                   ::= eL "+" e | eL "::" type | eL e | eL
eL                  ::= number | bool | var | "(" "\\" var ":" type "." e ")" | "If" e "Then" e "Else" e | "(" e ")" | "TYPE ERROR"
number              ::= Number
type                ::= typeL "->" type | typeL
typeL               ::= "Int" | "Bool" | "(" type ")" | "?"
typing              ::= var ":" type
typingEnvironment   ::= typing "," typingEnvironment | "{}"
var                 ::= Identifier


 Functions 
===========

cod                      : type -> type
cod("(" T ")")           = "(" cod(T) ")"
cod(T1 "->" T2)          = T2
cod("?")                 = "?"


dom                      : type -> type
dom("(" T ")")           = "(" dom(T) ")"
dom(T1 "->" T2)          = T1
dom("?")                 = "?"


plus                     : number -> e -> e
plus(e1, e2)             = !plus(e1, e2)


rename                   : var -> var -> type -> e -> e
rename(x, newVar, type, body)
                         = "(" "\\" newVar ":" type "." subs(x, newVar, body) ")"


subs                     : var -> e -> e -> e
subs(x, y, x)            = y
subs(x, y, "(" "\\" x ":" t "." rest ")")
                         = subs(x, y, rename(x, !newvar(x, rest), t, rest))
subs(x, y, "(" "\\" z ":" t "." rest ")")
                         = "(" "\\" z ":" t "." subs(x, y, rest) ")"
subs(x, y, "If" cond "Then" e1 "Else" e2)
                         = "If" subs(x, y, cond) "Then" subs(x, y, e1) "Else" subs(x, y, e2)
subs(x, y, e1 "+" e2)    = subs(x, y, e1) "+" subs(x, y, e2)
subs(x, y, e "::" type)  = subs(x, y, e) "::" type
subs(x, y, f arg)        = subs(x, y, f) subs(x, y, arg)
subs(x, y, z)            = z


 Relations 
===========

(→) 	: e (in), e (out)	Pronounced as "evaluation"
(→*) 	: e (in), e (out)	Pronounced as "big step"
(✓) 	: e (in)	Pronounced as "is canonical"
(⊢) 	: typingEnvironment (in), e (in), type (out)	Pronounced as "context entails typing"
(::) 	: e (in), type (out)	Pronounced as "type in empty context"
(~) 	: type (in), type (in)	Pronounced as "is consistent"

 Rules 
=======


#  Rules about "evaluation", with symbol (→) 
# -------------------------------------------

 b: bool
-------------------  	[EvalAscrBool]
 b "::" "Bool" → b


 e: number
------------------------------  	[EvalCastBoolErr]
 e "::" "Bool" → "TYPE ERROR"


 i: number
------------------  	[EvalCastInt]
 i "::" "Int" → i


 e: bool
-----------------------------  	[EvalCastIntErr]
 e "::" "Int" → "TYPE ERROR"


 
----------------  	[EvalCastUnkown]
 e "::" "?" → e


 e0 → e1
---------------  	[EvalCtx]
 e[e0] → e[e1]


 
-------------------------------------------------------  	[EvalIfErr]
 "If" (cond:number) "Then" e1 "Else" e2 → "TYPE ERROR"


 
---------------------------------------  	[EvalIfFalse]
 "If" "False" "Then" e1 "Else" e2 → e2


 
--------------------------------------  	[EvalIfTrue]
 "If" "True" "Then" e1 "Else" e2 → e1


 (✓) arg	arg "::" type → arg'
------------------------------------------------------------  	[EvalLamApp']
 ("(" "\\" var ":" type "." e ")") arg → subs(var, arg', e)


 
---------------  	[EvalParens]
 "(" e ")" → e


 n1: number	n2: number
-----------------------------------  	[EvalPlus]
 (n1:number) "+" n2 → plus(n1, n2)


 
---------------------------------  	[EvalPlusErrL]
 (n1:bool) "+" n2 → "TYPE ERROR"


 
---------------------------------  	[EvalPlusErrR]
 n1 "+" (n2:bool) → "TYPE ERROR"




#  Rules about "big step", with symbol (→*) 
# ------------------------------------------

 e0 → e1	(✓) e1
------------------------  	[BigStepBase]
 e0 →* e1


 (✓) e
--------  	[BigStepCanon]
 e →* e


 e0 → e1	e1 →* e2
--------------------------  	[BigStepRec]
 e0 →* e2




#  Rules about "is canonical", with symbol (✓) 
# ---------------------------------------------

 b: bool
----------  	[CanonBool]
 (✓) b


 
------------------  	[CanonError]
 (✓) "TYPE ERROR"


 n: number
------------  	[CanonNumber]
 (✓) n




#  Rules about "context entails typing", with symbol (⊢) 
# -------------------------------------------------------

 Γ ⊢ e, T'	T' ~ T
------------------------  	[TAscr]
 Γ ⊢ e "::" T, T'


 Γ ⊢ c, "Bool"	Γ ⊢ e1, Tl	Γ ⊢ e2, Tr	Tl ~ Tr
---------------------------------------------------------  	[TIf]
 Γ ⊢ "If" c "Then" e1 "Else" e2, Tl


 (x ":" T1) "," Γ ⊢ e, T2
-------------------------------------------------------  	[TLambda]
 Γ ⊢ "(" "\\" x ":" T1 "." e ")", ("(" T1 ")") "->" T2


 Γ ⊢ e, T
------------------  	[TParens]
 Γ ⊢ "(" e ")", T


 Γ ⊢ n1, "Int"	Γ ⊢ n2, "Int"
-------------------------------  	[TPlus]
 Γ ⊢ n1 "+" n2, "Int"


 Γ ⊢ e1, Tfunc	Γ ⊢ e2, Targ	Targ ~ dom(Tfunc)
---------------------------------------------------  	[Tapp]
 Γ ⊢ e1 e2, cod(Tfunc)


 b: bool
---------------  	[Tbool]
 Γ ⊢ b, "Bool"


 n: number
--------------  	[Tnumber]
 Γ ⊢ n, "Int"


 
-------------------  	[Tx]
 Γ[x ":" T] ⊢ x, T




#  Rules about "type in empty context", with symbol (::) 
# -------------------------------------------------------

 "{}" ⊢ e, T
--------------  	[TEmptyCtx]
 e :: T




#  Rules about "is consistent", with symbol (~) 
# ----------------------------------------------

 Ta1 ~ Ta2	Tb1 ~ Tb2
-----------------------------  	[ConsArrow]
 Ta1 "->" Tb1 ~ Ta2 "->" Tb2


 T1 = T2 : type
-----------------  	[ConsBase]
 T1 ~ T2


 
---------  	[ConsLeft]
 "?" ~ T


 T1 ~ T2
-----------------  	[ConsParL]
 "(" T1 ")" ~ T2


 T1 ~ T2
-----------------  	[ConsParR]
 T1 ~ "(" T2 ")"


 
---------  	[ConsRight]
 T ~ "?"


