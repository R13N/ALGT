# (\x : ? . x ) 5 applied to ::
# Proof weight: 8, proof depth: 4

------------------- [Tx]                                                 ------- [ConsRight]
(x : ?) , {} ⊢ x, ?                             5 : number               Int ~ ?
---------------------------------- [TLambda]    ----------- [Tnumber]    ------------------- [ConsParR]
{} ⊢ ( \ x : ? . x ), (( ? )) -> ?              {} ⊢ 5, Int              Int ~ ( ? )
------------------------------------------------------------------------------------------------ [Tapp]
{} ⊢ (( \ x : ? . x )) 5, ?
------------------------------------------------------------------------------------------- [TEmptyCtx]
(( \ x : ? . x )) 5 :: ?




# (\x : ? . x ) True applied to ::
# Proof weight: 8, proof depth: 4

------------------- [Tx]                                                   -------- [ConsRight]
(x : ?) , {} ⊢ x, ?                             True : bool                Bool ~ ?
---------------------------------- [TLambda]    --------------- [Tbool]    -------------------- [ConsParR]
{} ⊢ ( \ x : ? . x ), (( ? )) -> ?              {} ⊢ True, Bool            Bool ~ ( ? )
--------------------------------------------------------------------------------------------------- [Tapp]
{} ⊢ (( \ x : ? . x )) True, ?
---------------------------------------------------------------------------------------------- [TEmptyCtx]
(( \ x : ? . x )) True :: ?




# 5 :: ? applied to ::
# Proof weight: 5, proof depth: 4

5 : number               
----------- [Tnumber]    ------- [ConsRight]
{} ⊢ 5, Int              Int ~ ?
------------------------------------ [TAscr]
{} ⊢ 5 :: ?, Int
-------------------------------- [TEmptyCtx]
5 :: ? :: Int




# Could not apply relation :: to relation the input (\x : Bool . x) 0, because: 
While trying to proof that (::) is applicable to "(( \ x : Bool . x )) 0":
  Not a single rule matched:
  While trying to intepret the rule TEmptyCtx with (( \ x : Bool . x )) 0:
    While trying to proof that (⊢) is applicable to "{}, (( \ x : Bool . x )) 0":
      Not a single rule matched:
      While trying to intepret the rule TAscr with {}, (( \ x : Bool . x )) 0:
        Sequence lengths are not the same: e "::" T /= ("(" "\\" "x" ":" "Bool" "." "x" ")") 0
      
      While trying to intepret the rule TIf with {}, (( \ x : Bool . x )) 0:
        Sequence lengths are not the same: "If" c "Then" e1 "Else" e2 /= ("(" "\\" "x" ":" "Bool" "." "x" ")") 0
      
      While trying to intepret the rule TLambda with {}, (( \ x : Bool . x )) 0:
        Sequence lengths are not the same: "(" "\\" x ":" T1 "." e ")" /= ("(" "\\" "x" ":" "Bool" "." "x" ")") 0
      
      While trying to intepret the rule TParens with {}, (( \ x : Bool . x )) 0:
        Sequence lengths are not the same: "(" e ")" /= ("(" "\\" "x" ":" "Bool" "." "x" ")") 0
      
      While trying to intepret the rule TPlus with {}, (( \ x : Bool . x )) 0:
        Sequence lengths are not the same: n1 "+" n2 /= ("(" "\\" "x" ":" "Bool" "." "x" ")") 0
      
      While trying to intepret the rule Tapp with {}, (( \ x : Bool . x )) 0:
        While trying to proof that (~) is applicable to "Int, ( Bool )":
          Not a single rule matched:
          While trying to intepret the rule ConsArrow with Int, ( Bool ):
            Could not match Ta1 "->" Tb1 /= "Int"
          
          While trying to intepret the rule ConsBase with Int, ( Bool ):
            Equality predicate not met: T1="Int" /= "(" "Bool" ")"=T2
          
          While trying to intepret the rule ConsLeft with Int, ( Bool ):
            Not the same literal: ? /= Int
          
          While trying to intepret the rule ConsParL with Int, ( Bool ):
            Could not match "(" T1 ")" /= "Int"
          
          While trying to intepret the rule ConsParR with Int, ( Bool ):
            While trying to proof that (~) is applicable to "Int, Bool":
              Not a single rule matched:
              While trying to intepret the rule ConsArrow with Int, Bool:
                Could not match Ta1 "->" Tb1 /= "Int"
              
              While trying to intepret the rule ConsBase with Int, Bool:
                Equality predicate not met: T1="Int" /= "Bool"=T2
              
              While trying to intepret the rule ConsLeft with Int, Bool:
                Not the same literal: ? /= Int
              
              While trying to intepret the rule ConsParL with Int, Bool:
                Could not match "(" T1 ")" /= "Int"
              
              While trying to intepret the rule ConsParR with Int, Bool:
                Could not match "(" T2 ")" /= "Bool"
              
              While trying to intepret the rule ConsRight with Int, Bool:
                Not the same literal: ? /= Bool
              
          
          While trying to intepret the rule ConsRight with Int, ( Bool ):
            Could not match "?" /= "(" "Bool" ")"
          
      
      While trying to intepret the rule Tbool with {}, (( \ x : Bool . x )) 0:
        b = ("(" "\\" "x" ":" "Bool" "." "x" ")") 0 is not a "bool"
      
      While trying to intepret the rule Tnumber with {}, (( \ x : Bool . x )) 0:
        n = ("(" "\\" "x" ":" "Bool" "." "x" ")") 0 is not a "number"
      
      While trying to intepret the rule Tx with {}, (( \ x : Bool . x )) 0:
        Could not match Γ[x ":" T] /= "{}"
      
  

# (\x : Int . x) 0 applied to ::
# Proof weight: 9, proof depth: 5

                                                                               T1 = Int = T2
----------------------- [Tx]                                                   ------------- [ConsBase]
(x : Int) , {} ⊢ x, Int                               0 : number               Int ~ Int
---------------------------------------- [TLambda]    ----------- [Tnumber]    ------------------------ [ConsParR]
{} ⊢ ( \ x : Int . x ), (( Int )) -> Int              {} ⊢ 0, Int              Int ~ ( Int )
----------------------------------------------------------------------------------------------------------- [Tapp]
{} ⊢ (( \ x : Int . x )) 0, Int
------------------------------------------------------------------------------------------------------ [TEmptyCtx]
(( \ x : Int . x )) 0 :: Int




# (\x : Int . x) 0 :: Int applied to ::
# Proof weight: 12, proof depth: 5

                                                      0 : number               T1 = Int = T2               T1 = Int = T2
----------------------- [Tx]                          ----------- [Tnumber]    ------------- [ConsBase]    ------------- [ConsBase]
(x : Int) , {} ⊢ x, Int                               {} ⊢ 0, Int              Int ~ Int                   Int ~ Int
---------------------------------------- [TLambda]    ----------------------------------------- [TAscr]    ------------------------ [ConsParR]
{} ⊢ ( \ x : Int . x ), (( Int )) -> Int              {} ⊢ 0 :: Int, Int                                   Int ~ ( Int )
--------------------------------------------------------------------------------------------------------------------------------------- [Tapp]
{} ⊢ (( \ x : Int . x )) (0 :: Int), Int
---------------------------------------------------------------------------------------------------------------------------------- [TEmptyCtx]
(( \ x : Int . x )) (0 :: Int) :: Int




# (\x : Int . x) 0 :: ? applied to ::
# Proof weight: 11, proof depth: 5

                                                      0 : number                                      T1 = Int = T2
----------------------- [Tx]                          ----------- [Tnumber]    ------- [ConsRight]    ------------- [ConsBase]
(x : Int) , {} ⊢ x, Int                               {} ⊢ 0, Int              Int ~ ?                Int ~ Int
---------------------------------------- [TLambda]    ------------------------------------ [TAscr]    ------------------------ [ConsParR]
{} ⊢ ( \ x : Int . x ), (( Int )) -> Int              {} ⊢ 0 :: ?, Int                                Int ~ ( Int )
---------------------------------------------------------------------------------------------------------------------------------- [Tapp]
{} ⊢ (( \ x : Int . x )) (0 :: ?), Int
----------------------------------------------------------------------------------------------------------------------------- [TEmptyCtx]
(( \ x : Int . x )) (0 :: ?) :: Int




