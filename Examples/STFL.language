 
 STFL 
******

# A Simply Typed Function Language

 Syntax
========

bool	::= "True" | "False"



# Types
typeL	::= "Int" | "Bool" | "(" type ")"
type	::= typeL "->" type | typeL



var	::= Identifier
number	::= Number
value	::= bool | number

e	::= eL "+" e 
	| eL "::" type 
	| eL e
	| eL

eL	::= value 
	| var 
	| "(" "\\" var ":" type "." e ")" 
	| "If" e "Then" e "Else" e | "(" e ")"


typing			::= var ":" type
typingEnvironment	::= typing "," typingEnvironment | "{}"


 Syntax Style
==============

type	-> "type"
typeL	-> "type"

var	-> "identifier"
number	-> "constant"
bool	-> "constant"
e	-> "statement"
eL	-> "statement"
eL.4	-> "keyword"


 Functions
===========


id		: e -> e
id(e)		= e


# deduces a new name for the variable in an lambda abstraction
rename		: var -> var -> type -> e -> eL
rename(x, newVar, type, body)
		= "(" "\\" newVar ":" type "." subs(x, newVar, body ) ")"

# replaces variable x by y in entire expression
subs						: var -> e -> e -> e
subs(x, y, x)					= y
subs(x, y, "(" "\\" x ":" t "." rest ")" )	= subs(x, y, rename(x, !newvar:var(x, rest), t, rest) )
subs(x, y, "(" "\\" z ":" t "." rest ")" )	= "(" "\\" z ":" t "." subs(x,y,rest) ")"
subs(x, y, "If" cond "Then" e1 "Else" e2)	= "If" subs(x, y, cond) "Then" subs(x, y, e1) "Else" subs(x, y, e2)
subs(x, y, e1 "+" e2)				= subs(x, y, e1) "+" subs(x, y, e2)
subs(x, y, e "::" type)				= subs(x, y, e) "::" type
subs(x, y, f arg)				= subs(x, y, f) subs(x, y, arg) 
subs(x, y, "(" e ")")				= "(" subs(x, y, e) ")"
subs(x, y, z)					= z


eval			: e -> value
eval( (v : value) )	= v
eval(("(" "\\" x ":" t "." e ")") arg)
			= eval(subs(x, arg, e))
eval(f a)		= eval(eval(f) a)
eval("If" "True" "Then" e1 "Else" e2)
			= eval(e1)
eval("If" "False" "Then" e1 "Else" e2)
			= eval(e2)
eval("If" c "Then" e1 "Else" e2)
			= eval("If" eval(c) "Then" e1 "Else" e2)
eval("(" e ")")		= eval(e)
eval(e1 "+" e2)		= !plus:number(eval(e1), eval(e2))
eval(e "::" t)		= eval(e)
eval( (v:var) )		= !error:value("Unknown variable", v)


defaultValue		: type -> e
defaultValue("Bool")	= "True"
defaultValue("Int")	= 1
defaultValue(ta "->" tr)
			= "(" "\\" "x" ":" ta "." defaultValue(tr) ")"
defaultValue("(" t ")")	= defaultValue(t)

dom 		: type -> type
dom("(" T ")")	= dom(T)
dom(T1 "->" T2) = T1

cod 		: type -> type
cod("(" T ")")	= cod(T)
cod(T1 "->" T2) = T2

# wrappers for builtin functions, as we can't type within a builtin
plus		: number -> e -> number
plus(e1, e2)	= !plus:number(e1, e2)


 Relations
===========

# (:) is reserved, as predicate that a term is of a production rule
# one can refer to rewrite rules/functions earlier on

(→)	: e (in), e (out)	Pronounced as "evaluation"
(→*)	: e (in), e (out)	Pronounced as "big step"
(✓)	: e (in)		Pronounced as "is canonical"

(⊢)	: typingEnvironment (in), e (in), type (out)	Pronounced as "context entails typing"

(::)	: e (in), type (out)	Pronounced as "type in empty context"

(==)	: type (in), type (in)	Pronounced as "equals"


 Rules
=======




 e0 → e1
-----------------			[EvalCtx]
 e[e0] → e[e1]



 n1:number	n2:number
------------------------------------	[EvalPlus]
 (n1:number) "+" n2 → plus(n1, n2)



 b:bool
--------------------			[EvalAscrBool]
 b "::" "Bool" → b

 i:number
-------------------			[EvalAscrInt]
 i "::" "Int" → i


 e "::" t → e
------------------------ [EvalAscrPar]
 e "::" ("(" t ")") → e


----------------			[EvalParens]
 "(" e ")" → e


---------------------------------------		[EvalIfTrue]
 "If" "True" "Then" e1 "Else" e2 → e1


----------------------------------------	[EvalIfFalse]
 "If" "False" "Then" e1 "Else" e2 → e2


------------------------------------------------------------	[EvalLamApp]
 ("(" "\\" var ":" type "." e ")") arg → subs(var, arg, e)





 b:bool
-------			[CanonBool]
 (✓) b

 n:number
---------		[CanonNumber]
 (✓) n



 (✓) e
--------			[BigStepCanon]
 e →* e

 e0 → e1	e1 →* e2
-------------------------	[BigStepRec]
 e0 →* e2

 e0 → e1	(✓) e1
------------------------	[BigStepBase]
 e0 →* e1





 "{}" ⊢ e, T  
-----------	[TEmptyCtx]
 e :: T




 n:number
---------------		[Tnumber] 
 Γ ⊢ n, "Int"


 b:bool
----------------	[Tbool]
 Γ ⊢ b, "Bool"



 Γ ⊢ e, T
-------------------	[TParens]
 Γ ⊢ "(" e ")", T


 Γ ⊢ e, T'	T' == T
----------------------- [TAscr]
 Γ ⊢ e "::" T, T'



--------------------	[Tx]
 Γ[ x ":" T ] ⊢ x, T


 Γ ⊢ n1, "Int"	Γ ⊢ n2, "Int"
------------------------------				[TPlus]
 Γ ⊢ n1 "+" n2, "Int"


 Γ ⊢ c, "Bool"	Γ ⊢ e1, Tl	Γ ⊢ e2, Tr	Tl == Tr
--------------------------------------------------------	[TIf]
 Γ ⊢ "If" c "Then" e1 "Else" e2, Tl



 ((x ":" T1) "," Γ) ⊢ e, T2
-------------------------------------------------------	[TLambda]
 Γ ⊢ "(" "\\" x ":" T1 "." e ")", ( "(" T1 ")") "->" T2



 Γ ⊢ e1, Tfunc	Γ ⊢ e2, Targ	Targ == dom(Tfunc)
---------------------------------------------------	[Tapp]
 Γ ⊢ e1 e2, cod(Tfunc)






 T1 = T2 : type
--------------- [EqBase]
 T1 == T2


 T1 == T2
----------------- [EqParL]
 "(" T1 ")" == T2

 T1 == T2
----------------- [EqParR]
 T1 == "(" T2 ")"


 Ta1 == Ta2	Tb1 == Tb2
---------------------------------- [EqArrow]
 Ta1 "->" Tb1   ==   Ta2 "->" Tb2


 Properties
============

 e0 :: T	 e0 → e1
-------------------------- [Preservation]
         e1 :: T


         e0 :: T
-------------------------- [Progress]
 (✓) e0    |     e0 → e1 



# STFL can't contain loops (or recursion), so will always terminate

 
 e :: T
-------- [Termination]
 e →* v 

