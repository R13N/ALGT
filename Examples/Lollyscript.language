
 Lollyscript
*************


 Syntax
========

q	::= "un" | "lin"

preType	::= "Int" | "Unit" 
	| type "*" type | type "->" type 
	| "Fut" x type | "Res" x type
type	::= q preType


x	::= Identifier
n	::= Number

unit	::= "unit"
v	::= q n | q unit | q v "," v
	| q "λ" x type e
	| q "Fut" x type
	| q "Res" x type

eL	::= x | q n | q unit | q e "," e 
	| q "λ" x type e 
	| "Let" x "," x "=" e "," e 
	| "Promise" type | "fork" e | "wait" e | "resolve" e e | q "Fut" x type | q "Res" x type
e	::= eL e | eL


typing		::= x ":" type
typeEnv		::= typing ";" typeEnv | "{}"

promiseVal	::= x "=" v
promiseEnv	::= promiseVal ";" promiseEnv | "{}"


thread		::= e

program		::= thread "\n" program | promiseEnv

 Functions
===========

lookup		: typeEnv -> x -> type
lookup( (x ":" T) ";" rest, x )	= T
lookup( typing ";" rest, x)	= lookup(rest, x)


find		: promiseEnv -> x -> v
find( (x "=" v) ";" rest, x)	= v
find( assgn ";" rest, x )	= find(rest, x)



 Relations
===========

(→)	: e (in), e (out)


 Rules
=======





