 
 LSec 
******

# Security language by ZDancewic 2002, as given by Ronald Garcia and Éric Tanter in Deriving a Simple Gradual Security Language (2006)

 Syntax
========

# Variable
x	::= Identifier

# public < restriced < CIA < TOP
# public < restriced < NSA < TOP
# NSA and CIA are not supposed to know each other secrets
levels	::= "public" | "restriced" | "CIA" | "NSA" | "TOP"

label	::= levels | "(" label "⋎" label ")" | "(" label "⋏" label ")"

bool	::= "true" | "false"
type	::= "Bool" label | "(" type "→" label type ")"
# raw term
r	::= bool | "λ" x ":" type "." t
v	::= r label

t	::= tL t | tL op t | tL "::" type | tL
# T without left recursion
tL	::= v | x | "if" t "then" t "else" t | "(" t ")"

# Operations
op	::= "∨" | "∧" | "⇒"


typing			::= x ":" type
typingEnvironment	::= typing "," typingEnvironment | "$"


 Functions
===========

joinL	: label -> label -> label
joinL(l0, l1)
	= "(" l0 "⋎" l1 ")"

# " ∨
join	: type -> type -> type
join("Bool" l0, "Bool" l1)
	= "Bool" joinL(l0, l1) 
join("(" t11 "→" l0 t12 ")", "(" t21 "→" l1 t22 ")")
	= "(" join(t11, t21) "→" joinL(l0, l1) join(t21, t22) ")"
join(t0, t1)
	= !error:type("Undefined")


meetL	: label -> label -> label
meetL(l0, l1)
	= "(" l0 "⋏" l1 ")"

# " ∨
meet	: type -> type -> type
meet("Bool" l0, "Bool" l1)
	= "Bool" meetL(l0, l1) 
meet("(" t11 "→" l0 t12 ")", "(" t21 "→" l1 t22 ")")
	= "(" meet(t11, t21) "→" meetL(l0, l1) meet(t21, t22) ")"
meet(t0, t1)
	= !error:type("Undefined")



 Relations
===========

#(→)	: e (in), e (out)	Pronounced as "evaluation"
(⊢)	: typingEnvironment (in), t (in), type (out)	Pronounced as "context entails typing"

(<:)	: type (in), type (in)	Pronounced as "is subtype of"
(≼)	: label (in), label (in)	Pronounced as "is less secure"
#(::)	: e (in), type (out)	Pronounced as "type in empty context"
#(==)	: type (in), type (in)	Pronounced as "equals"
#(✓)	: e (in)		Pronounced as "is canonical"

 Rules
=======


-------------------	[Sx]
 Γ[x ":" S] ⊢ x, S


--------------------------	[Sb]
 _ ⊢ (bool l:v), "Bool" l


 (x ":" S1) "," Γ ⊢ t, S2
----------------------------------------------------	[Sλ]
 Γ ⊢ ( "λ" x ":" S1 "." t) l , "(" S1 "→" l S2 ")"


Γ ⊢ t1 , "Bool" l1	Γ ⊢ t2 , "Bool" l2
--------------------------------------------- [SOp]
Γ ⊢ t1 op t2, "Bool" ("(" l1 "⋎" l2 ")")


Γ ⊢ t, "Bool" l		Γ ⊢ t1, S1	Γ ⊢ t2, S2
---------------------------------------------------- [SIf]
Γ ⊢ "if" t "then" t1 "else" t2, join



Γ ⊢ t1 , "(" S11 "→" l S12 ")"		Γ ⊢ t2 , S2	S2 <: S11
------------------------------------------------------------------- [SApp]
Γ ⊢ t1 op t2, "Bool" ("(" l1 "⋎" l2 ")")




Γ ⊢ t , S1	S1 <: S21
-------------------------- [S::]
Γ ⊢ t "::" S2 , S2







l0 ≼ l1
------------------------ [Subtyping Base] 
"Bool" l0 <: "Bool" l1


S21 <: S11	S12 <: S22	l1 ≼ l2
-------------------------------------------------- [Subtyping Curry]
"(" S11 "→" l1 S12 ")" <: "(" S21 "→" l2 S22 ")" 










------ [LRefl]
l ≼ l


------------------------ [LPub]
"public" ≼ "restriced"



-------------------- [LCIA]
"restriced"  ≼ "CIA"



-------------------- [LNSA]
"restriced"  ≼ "NSA"


-------------- [LCIATop]
"CIA"  ≼ "TOP"

-------------- [LNSATop]
"NSA"  ≼ "TOP"







# Properties
#============

# e0 :: T	 e0 → e1
#-------------------------- [Preservation]
#         e1 :: T


#         e0 :: T
#-------------------------- [Progress]
# (✓) e0    |     e0 → e1 


