
 Syntax
========

lower		::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
upper		::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"

letter		::= lower | upper
fluff		::= letter fluff | letter

dot		::= ";" fluff "." | "."
nl		::= ";" fluff "\n" | "\n"
nls		::= nl nls | nl



title		::= fluff dot

character	::= "Page" | "Pinch" | "Romeo" | "Juliet" | "Othello" | "Hamlet" | "Adam" | "Eve" | "God" | "Serpent"

val		::= Number

numeralBase	::= "I" | "V" | "X" | "V" | "L" | "D"
numeral		::= numeralBase numeral | numeralBase

article		::= "a" | "an" | "the"

posNoun		::= "flower" | "squirrel" | "man" | "woman"
posAdj		::= "nice" | "cute" | "lovely" | "wise" | "young" | "beautiful"

negNoun		::= "thug"
negAdj		::= "ugly"

noun		::= posNoun | negNoun
adj		::= posAdj | negAdj

expression	::= "square" "of" expression | "product" "of" expression "and" expression |  "quotient" "of" expression "and" expression | "difference" "of" expression "and" expression | "sum" "of" expression "and" expression | article expression | adj expression | noun

varDecl		::= character ":" expression dot
varDecls	::= varDecl nl varDecls | varDecl


personal	::= "I" | "Me" | "me"
other		::= "You" | "Thou" | "Thouself" | "Thyself" | "Thy" | "you" | "thou" | "thouself" | "thyself" | "thy"
person		::= character | other | personal
verb		::= "am" | "art" | "are" | "is"
specifier	::= person verb
action		::= specifier expression | "Remember" person | person "recall" | person "recalls" | goto "act" numeral | goto "scene" numeral
statement	::= character ":" action
statements	::= statement dot nls statements | statement

actAnnounce	::= "ACT" numeral ":" fluff dot nls
act		::= actAnnounce statements
acts		::= act dot nls acts | act

sceneAnnounce	::= "SCENE" numeral ":" fluff dot nls
scene		::= sceneAnnounce acts
scenes		::= scene dot nls scenes | scene

play		::= title nls varDecls nls scenes dot


# Runtime below

stack		::= val "," stack | ";"
declaredVars	::= character ":" stack declaredVars  | "$"


 Functions
===========

runPlay	: play -> declaredVars
runPlay(title nls varDecls nls0 scenes dot)
	= runScenes(scenes, scenes, runVarDecls(varDecls))

runScenes : scenes -> scenes -> declaredVars -> declaredVars
runScenes((scene:scene), scenes0, vars)
	= runScene(scene, vars)
runScenes(scene dot nls scenes, scenes0, vars)
	= runScene(scenes, runScene(scene, vars))

runScene : scene -> declaredVars -> declaredVars
runScene(sceneAnnounce acts, vars)
	= runActs(acts, vars)

runActs	: acts -> declaredVars -> declaredVars
runActs((act:act), vars)
	= runAct(act, vars)
runActs(act dot nls acts, vars)
	= runActs(acts, runAct(act, vars))

runAct	: act -> declaredVars -> declaredVars
runAct(announce stms, vars)
	= runStms(stms, vars)

runVarDecls	: varDecls -> declaredVars
runVarDecls(decl nl rest)
	= runVarDecl(decl, runVarDecls(rest))
runVarDecls((decl:varDecl))
	= runVarDecl(decl, "$")

runVarDecl	: varDecl -> declaredVars -> declaredVars
runVarDecl(char ":" expr dot, others)
		= char ":" (evalExpr(expr, others) "," ";") others

replaceStackhead	: val -> stack -> stack
replaceStackhead(v, (oldVal "," rest))
			= v "," rest
replaceStackhead(v, ";")
			= v ","";"

addStackHead		: val -> stack -> stack
addStackHead(v, s)	= v "," s

removeStackHead		: stack -> stack
removeStackHead(";")	= ";"
removeStackHead(v "," s)= s

peekStackHead		: stack -> val
peekStackHead(v "," s)	= v



putValue	: character -> val -> declaredVars -> declaredVars
putValue(char, newVal, char ":" stack others)
	= char ":" replaceStackhead(newVal, stack) others
putValue(char, newVal, person ":" stack others)
	= person ":" stack putValue(char, newVal, others)

pushValue	: character -> val -> declaredVars -> declaredVars
pushValue(char, newVal, char ":" stack others)
	= char ":" addStackHead(newVal, stack) others
pushValue(char, newVal, person ":" stack others)
	= person ":" stack pushValue(char, newVal, others)

popValue	: character -> declaredVars -> declaredVars
popValue(char, char ":" stack others)
	= char ":" removeStackHead(stack) others
popValue(char, person ":" stack others)
	= person ":" stack popValue(char, others)


getValue	: character -> declaredVars -> val
getValue(char, char ":" stack others)
	= peekStackHead(stack)
getValue(char, person ":" stack others)
	= getValue(char, others)




otherName	: character -> declaredVars -> character
otherName(caller, caller ":" stack rest)
		= otherName(caller, rest)
otherName(caller, other ":" stack rest)
		= other

# Othername if not a character
target	: character -> person -> declaredVars -> character
target(caller, (me:personal), vars)
	= caller
target(caller, (other:other), vars)
	= otherName(caller, vars)
target(caller, (char:character), vars)
	= char


runStms	: statements -> declaredVars -> declaredVars
runStms((stm:statement), vars)
	= runStm(stm, vars)
runStms(stm dot nls stms, vars)
	= runStms(stms, runStm(stm, vars))

runStm	: statement -> declaredVars -> declaredVars
runStm(caller ":" ((targ v) expr), vars)
	= putValue(target(caller, targ, vars), evalExpr(expr), vars)
runStm(caller ":" ("Remember" target), vars)
	= pushValue(otherName(caller, vars), getValue(target(caller, target, vars), vars), vars)
runStm(caller ":" (person "recall"), vars)
	= runStm(caller ":" (person "recalls"), vars)
runStm(caller ":" (person "recalls"), vars)
	= popValue(target(caller, person, vars), vars)

evalExpr	: expression -> val
evalExpr((n:posNoun))	= 1
evalExpr((n:negNoun))	= -1
evalExpr((adj:negAdj) e)= mul(evalExpr(e), -2)
evalExpr((adj:posAdj) e)= mul(evalExpr(e), 2)
evalExpr((a:article) e)	= evalExpr(e)
evalExpr("sum" "of" e1 "and" e2)
			= plus(evalExpr(e1), evalExpr(e2))
evalExpr("difference" "of" e1 "and" e2)
			= min(evalExpr(e1), evalExpr(e2))
evalExpr("quotient" "of" e1 "and" e2)
			= div(evalExpr(e1), evalExpr(e2))
evalExpr("product" "of" e1 "and" e2)
			= div(evalExpr(e1), evalExpr(e2))
evalExpr("square" "of" e)
			= mul(evalExpr(e), evalExpr(e))



plus		: val -> val -> val
plus(v0, v1)	= !plus(v0, v1)

min		: val -> val -> val
min(v0, v1)	= !min(v0, v1)

mul		: val -> val -> val
mul(v0, v1)	= !mul(v0, v1)

div		: val -> val -> val
div(v0, v1)	= !div(v0, v1)

mod		: val -> val -> val
mod(v0, v1)	= !mod(v0, v1)




 Relations
===========

 Rules
=======


