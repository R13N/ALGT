# Example of inference rule parsing

# Types always start with a uppercase letter
# Variables with a lowercase
# expressions as defined in StlcParser

# A file starts with 'Contextsymbol is ' followed by some non-whitespace chars, as no obvious context symbol came to mind
# |- represents 'entails'
# 0.. represent all natural numbers

Contextsymbol is $

 Functions
===========

dom : Type -> Type
dom(T1 -> T2) = T1
# undefined otherwises

cod : Type -> Type
cod(T1 -> T2) = T2
# undefined otherwise

# Currying syntax as in haskell
equate: Type -> Type -> Type
equate(T, T) = T
# undefined otherwise

 Rules
=======

	x: T in $
(Tx)   ----------- 
	$ |- x: T


	$ |- t1 : T1	$ |- t2: T2	T2 == dom(T1)
(Tapp) -----------------------------------------------
	$ |- (t1 t2) : cod(T1)


(Tn)   ----------------
	$ |- 0.. : Nat

	
(TbT)   ------------------
	$ |- True : Bool


	
(TbF)  ------------------
	$ |- False: Bool



