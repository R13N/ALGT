Output {_files = fromList [], _stdOut = ["Warning:","  While checking the totality of function \"cod\":","    Following calls will fall through:","      cod(\"Bool\")","      cod(\"Int\")","  While checking the totality of function \"dom\":","    Following calls will fall through:","      dom(\"Bool\")","      dom(\"Int\")","  While checking the totality of function \"equate\":","    Following calls will fall through:","      equate(type, type)","  While checking the totality of function \"eval\":","    Following calls will fall through:","      eval((\"(\" \"\\\\\" var \":\" type \".\" e \")\"))","  ",""," Relation analysis of STFL ","===========================","","Following new types were introduced:","  !(e)(\8594)in0 \t(derived from e)","  (e)(\8594)in0 \t(derived from e)","  !(e)(\8866)in1 \t(derived from e)","  (e)(\8866)in1 \t(derived from e)","  !(eL)(\8594)in0 \t(derived from eL)","  (eL)(\8594)in0 \t(derived from eL)","  !(eL)(\8866)in1 \t(derived from eL)","  (eL)(\8866)in1 \t(derived from eL)","  !(typeL)(==)in0 \t(derived from typeL)","  (typeL)(==)in0 \t(derived from typeL)","  !(typeL)(==)in1 \t(derived from typeL)","  (typeL)(==)in1 \t(derived from typeL)","  (value)(\8866)in1 \t(derived from value)","  (value)(\10003)in0 \t(derived from value)","","Following types were ommitted, as they turned out to coincide with some other type:","  ((e)(\8594)in0)(\8594*)in0 \t== (e)(\8594)in0","  ((e)(\8866)in1)(::)in0 \t== (e)(\8866)in1","  ((e)(\10003)in0)(\8594*)in0 \t== (e)(\10003)in0","  ((type)(==)in0)(==)in0 \t== (type)(==)in0","  ((type)(==)in1)(==)in1 \t== (type)(==)in1","  ((typingEnvironment)(\8866)in0)(\8866)in0 \t== (typingEnvironment)(\8866)in0","  (bool)(\8866)in1 \t== bool","  (bool)(\10003)in0 \t== bool","  (e)(::)in0 \t== (eL)(::)in0","  (e)(\8594*)in0 \t== (eL)(\8594*)in0","  (e)(\10003)in0 \t== (eL)(\10003)in0","  (eL)(::)in0 \t== (value)(::)in0","  (eL)(\8594*)in0 \t== (value)(\8594*)in0","  (eL)(\10003)in0 \t== (value)(\10003)in0","  (number)(\8866)in1 \t== number","  (number)(\10003)in0 \t== number","  (type)(==)in0 \t== type","  (type)(==)in1 \t== type","  (typingEnvironment)(\8866)in0 \t== typingEnvironment","","Following types were omitted, as they turned out to be empty. They might cause 'dissapearing' choices in other rules:","  !(value)(\8866)in1","  !(value)(\10003)in0","  (value)(::)in0","  (value)(\8594)in0","  (value)(\8594*)in0","  (bool)(::)in0","  (bool)(\8594)in0","  (bool)(\8594*)in0","  (number)(::)in0","  (number)(\8594)in0","  (number)(\8594*)in0","  (var)(::)in0","  (var)(\8594)in0","  (var)(\8594*)in0","  (var)(\8866)in1","  (var)(\10003)in0","","!(e)(\8594)in0 has following subtypes:  !(eL)(\8594)in0","!(e)(\8866)in1 has following subtypes:  !(eL)(\8866)in1","!(eL)(\8594)in0 has following subtypes:  value","  var","!(eL)(\8866)in1 has following subtypes:  var","(e)(\8594)in0 has following subtypes:  (eL)(\8594)in0","(e)(\8866)in1 has following subtypes:  (eL)(\8866)in1","(eL)(\8866)in1 has following subtypes:  (value)(\8866)in1","(value)(\8866)in1 has following subtypes:  bool","  number","(value)(\10003)in0 has following subtypes:  bool","  number","e has following subtypes:  !(e)(\8594)in0","  !(e)(\8866)in1","  (e)(\8594)in0","  (e)(\8866)in1","  eL","eL has following subtypes:  !(eL)(\8594)in0","  !(eL)(\8866)in1","  (eL)(\8594)in0","  (eL)(\8866)in1","  value","  var","type has following subtypes:  typeL","typeL has following subtypes:  !(typeL)(==)in0","  !(typeL)(==)in1","  (typeL)(==)in0","  (typeL)(==)in1","value has following subtypes:  (value)(\8866)in1","  (value)(\10003)in0","  bool","  number","",""," Resulting Syntax ","------------------","","bool             ::= \"True\"","                 | \"False\"","e                ::= eL \"+\" e","                 | eL \"::\" type","                 | eL e","                 | eL","eL               ::= value","                 | var","                 | \"(\" \"\\\\\" var \":\" type \".\" e \")\"","                 | \"If\" e \"Then\" e \"Else\" e","                 | \"(\" e \")\"","number           ::= Number","type             ::= typeL \"->\" type","                 | typeL","typeL            ::= \"Int\"","                 | \"Bool\"","                 | \"(\" type \")\"","typing           ::= var \":\" type","typingEnvironment::= typing \",\" typingEnvironment","                 | \"{}\"","value            ::= bool","                 | number","var              ::= Identifier","","","# Run --irasvg PATH.svg to generate a nice svg about the subtyping relationsships"]}