Output {_files = fromList [], _stdOut = ["Warning:","  While checking the totality of function \"cod\":","    Following calls will fall through:","      cod(\"Bool\")","      cod(\"Int\")","  While checking the totality of function \"dom\":","    Following calls will fall through:","      dom(\"Bool\")","      dom(\"Int\")","  While checking the totality of function \"equate\":","    Following calls will fall through:","      equate(type, type)","  While checking the totality of function \"eval\":","    Following calls will fall through:","      eval(\"TYPE ERROR\")","      eval((\"(\" \"\\\\\" var \":\" type \".\" e \")\"))","  ","  While checking liveability of every clause in function \"subs\":","    subs(x, y, \"(\" e \")\")    = \"(\" subs(x, y, e) \")\" will never match anything, as the possible arguments are already consumed","  ","","  Dynamized STFL "," ****************","",""," Syntax ","========","","bool             ::= \"True\"","                 | \"False\"","e                ::= eL \"+\" e","                 | eL \"::\" type","                 | eL e","                 | eL","eL               ::= value","                 | var","                 | \"(\" \"\\\\\" var \":\" type \".\" e \")\"","                 | \"If\" e \"Then\" e \"Else\" e","                 | \"(\" e \")\"","                 | \"TYPE ERROR\"","number           ::= Number","type             ::= typeL \"->\" type","                 | typeL","typeL            ::= \"Int\"","                 | \"Bool\"","                 | \"(\" type \")\"","typing           ::= var \":\" type","typingEnvironment::= typing \",\" typingEnvironment","                 | \"{}\"","value            ::= bool","                 | number","var              ::= Identifier","","",""," Syntax Highlighting ","=====================","","bool\t -> \"constant\"","e\t -> \"statement\"","eL\t -> \"statement\"","eL.4\t -> \"keyword\"","number\t -> \"constant\"","type\t -> \"type\"","typeL\t -> \"type\"","var\t -> \"identifier\"","","","",""," Functions ","===========","","cod                      : type -> type","cod(\"(\" T \")\")           = cod(T)","cod(T1 \"->\" T2)          = T2","","","defaultValue             : type -> e","defaultValue(\"Bool\")     = \"True\"","defaultValue(\"Int\")      = 1","defaultValue(ta \"->\" tr) = \"(\" \"\\\\\" \"x\" \":\" ta \".\" defaultValue(tr) \")\"","defaultValue(\"(\" t \")\")  = defaultValue(t)","","","dom                      : type -> type","dom(\"(\" T \")\")           = dom(T)","dom(T1 \"->\" T2)          = T1","","","equate                   : type -> type -> type","equate(T, T)             = T","","","eval                     : e -> value","eval((v:value))          = v","eval((\"(\" \"\\\\\" x \":\" t \".\" e \")\") arg)","                         = eval(subs(x, arg, e))","eval(f a)                = eval(eval(f) a)","eval(\"If\" \"True\" \"Then\" e1 \"Else\" e2)","                         = eval(e1)","eval(\"If\" \"False\" \"Then\" e1 \"Else\" e2)","                         = eval(e2)","eval(\"If\" c \"Then\" e1 \"Else\" e2)","                         = eval(\"If\" eval(c) \"Then\" e1 \"Else\" e2)","eval(\"(\" e \")\")          = eval(e)","eval(e1 \"+\" e2)          = !plus(eval(e1), eval(e2))","eval(e \"::\" t)           = eval(e)","eval((v:var))            = !error(\"Unknown variable\", v)","","","id                       : e -> e","id(e)                    = e","","","plus                     : number -> e -> number","plus(e1, e2)             = !plus(e1, e2)","","","rename                   : var -> var -> type -> e -> eL","rename(x, newVar, type, body)","                         = \"(\" \"\\\\\" newVar \":\" type \".\" subs(x, newVar, body) \")\"","","","subs                     : var -> e -> e -> e","subs(x, y, x)            = y","subs(x, y, \"(\" \"\\\\\" x \":\" t \".\" rest \")\")","                         = subs(x, y, rename(x, !newvar(x, rest), t, rest))","subs(x, y, \"(\" \"\\\\\" z \":\" t \".\" rest \")\")","                         = \"(\" \"\\\\\" z \":\" t \".\" subs(x, y, rest) \")\"","subs(x, y, \"If\" cond \"Then\" e1 \"Else\" e2)","                         = \"If\" subs(x, y, cond) \"Then\" subs(x, y, e1) \"Else\" subs(x, y, e2)","subs(x, y, e1 \"+\" e2)    = subs(x, y, e1) \"+\" subs(x, y, e2)","subs(x, y, e \"::\" type)  = subs(x, y, e) \"::\" type","subs(x, y, f arg)        = subs(x, y, f) subs(x, y, arg)","subs(x, y, \"(\" e \")\")    = \"(\" subs(x, y, e) \")\"","subs(x, y, z)            = z","","","",""," Relations ","===========","","(::) \t: e (in), type (out)\tPronounced as \"type in empty context\"","(==) \t: type (in), type (in)\tPronounced as \"equals\"","(\8594) \t: e (in), e (out)\tPronounced as \"evaluation\"","(\8594*) \t: e (in), value (out)\tPronounced as \"big step\"","(\8866) \t: typingEnvironment (in), e (in), type (out)\tPronounced as \"context entails typing\"","(\10003) \t: e (in)\tPronounced as \"is canonical\"","","",""," Rules ","=======","","","","#  Rules about \"type in empty context\", with symbol (::) ","# -------------------------------------------------------","",""," \"{}\" \8866 e, T","--------------  \t[TEmptyCtx]"," e :: T","","","","","","","#  Rules about \"equals\", with symbol (==) ","# ----------------------------------------","",""," Ta1 == Ta2\tTb1 == Tb2","-------------------------------  \t[EqArrow]"," Ta1 \"->\" Tb1 == Ta2 \"->\" Tb2","",""," T1 = T2 : type","-----------------  \t[EqBase]"," T1 == T2","",""," T1 == T2","-------------------  \t[EqParL]"," \"(\" T1 \")\" == T2","",""," T1 == T2","-------------------  \t[EqParR]"," T1 == \"(\" T2 \")\"","","","","","","","#  Rules about \"evaluation\", with symbol (\8594) ","# -------------------------------------------","",""," b: bool","--------------------  \t[EvalAscrBool]"," b \"::\" \"Bool\" \8594 b","",""," i: number","-------------------  \t[EvalAscrInt]"," i \"::\" \"Int\" \8594 i","",""," e \"::\" t \8594 e","-------------------------  \t[EvalAscrPar]"," e \"::\" (\"(\" t \")\") \8594 e","",""," e: number","-------------------------------  \t[EvalCastBoolErr]"," e \"::\" \"Bool\" \8594 \"TYPE ERROR\"","",""," e: bool","------------------------------  \t[EvalCastIntErr]"," e \"::\" \"Int\" \8594 \"TYPE ERROR\"","",""," e0 \8594 e1","----------------  \t[EvalCtx]"," e[e0] \8594 e[e1]","",""," ","--------------------------------------------------------  \t[EvalIfErr]"," \"If\" (cond:number) \"Then\" e1 \"Else\" e2 \8594 \"TYPE ERROR\"","",""," ","----------------------------------------  \t[EvalIfFalse]"," \"If\" \"False\" \"Then\" e1 \"Else\" e2 \8594 e2","",""," ","---------------------------------------  \t[EvalIfTrue]"," \"If\" \"True\" \"Then\" e1 \"Else\" e2 \8594 e1","",""," (\10003) arg\targ \"::\" type \8594 arg'","-------------------------------------------------------------  \t[EvalLamApp]"," (\"(\" \"\\\\\" var \":\" type \".\" e \")\") arg \8594 subs(var, arg', e)","",""," ","----------------  \t[EvalParens]"," \"(\" e \")\" \8594 e","",""," n1: number\tn2: number","------------------------------------  \t[EvalPlus]"," (n1:number) \"+\" n2 \8594 plus(n1, n2)","",""," ","----------------------------------  \t[EvalPlusErrL]"," (n1:bool) \"+\" n2 \8594 \"TYPE ERROR\"","",""," ","----------------------------------  \t[EvalPlusErrR]"," n1 \"+\" (n2:bool) \8594 \"TYPE ERROR\"","","","","","","","#  Rules about \"big step\", with symbol (\8594*) ","# ------------------------------------------","",""," e0 \8594 e1\t(\10003) e1","------------------------  \t[BigStepBase]"," e0 \8594* e1","",""," (\10003) e","---------  \t[BigStepCanon]"," e \8594* e","",""," e0 \8594 e1\te1 \8594* e2","--------------------------  \t[BigStepRec]"," e0 \8594* e2","","","","","","","#  Rules about \"context entails typing\", with symbol (\8866) ","# -------------------------------------------------------","",""," \915 \8866 e, T'\tT' == T","-------------------------  \t[TAscr]"," \915 \8866 e \"::\" T, T'","",""," \915 \8866 c, \"Bool\"\t\915 \8866 e1, Tl\t\915 \8866 e2, Tr\tTl == Tr","----------------------------------------------------------  \t[TIf]"," \915 \8866 \"If\" c \"Then\" e1 \"Else\" e2, Tl","",""," (x \":\" T1) \",\" \915 \8866 e, T2","--------------------------------------------------------  \t[TLambda]"," \915 \8866 \"(\" \"\\\\\" x \":\" T1 \".\" e \")\", (\"(\" T1 \")\") \"->\" T2","",""," \915 \8866 e, T","-------------------  \t[TParens]"," \915 \8866 \"(\" e \")\", T","",""," \915 \8866 n1, \"Int\"\t\915 \8866 n2, \"Int\"","-------------------------------  \t[TPlus]"," \915 \8866 n1 \"+\" n2, \"Int\"","",""," \915 \8866 e1, Tfunc\t\915 \8866 e2, Targ\tTarg == dom(Tfunc)","----------------------------------------------------  \t[Tapp]"," \915 \8866 e1 e2, cod(Tfunc)","",""," b: bool","----------------  \t[Tbool]"," \915 \8866 b, \"Bool\"","",""," n: number","---------------  \t[Tnumber]"," \915 \8866 n, \"Int\"","",""," ","--------------------  \t[Tx]"," \915[x \":\" T] \8866 x, T","","","","","","","#  Rules about \"is canonical\", with symbol (\10003) ","# ---------------------------------------------","",""," b: bool","----------  \t[CanonBool]"," (\10003) b","",""," ","-------------------  \t[CanonError]"," (\10003) \"TYPE ERROR\"","",""," n: number","------------  \t[CanonNumber]"," (\10003) n","","","","","",""," Properties ","============","",""," e0 :: T\te0 \8594 e1","-------------------------  \t[Preservation]"," e1 :: T","",""," e0 :: T","---------------------------  \t[Progress]"," (\10003) e0 \t| e0 \8594 e1","",""," e :: T","---------  \t[Termination]"," e \8594* v","",""]}