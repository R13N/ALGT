Testcase 8
Test/STFL.language --ir → --plain

While checking file Test/STFL.language:
  Warning:
    While checking the totality of function "equate":
      Following calls will fall through:
        equate(type, type)
    
Done quickchecking property Preservation with 8 examples                        
Done quickchecking property Progress with 8 examples                            
Done quickchecking property Termination with 8 examples                         

 Analysis for rules about (→) 
==============================

# (→) 	: e (in), e (out)	Pronounced as "evaluation"

# Known rules are
#   EvalCtx
#   EvalPlus
#   EvalAscrBool
#   EvalAscrInt
#   EvalParens
#   EvalIfTrue
#   EvalIfFalse
#   EvalLamApp

Applicable to:
  (eL "+" e)
  (eL "::" type)
  (eL e)
  ("(" "\\" var ":" type "." e ")")
  ("If" e "Then" e "Else" e)
  ("(" e ")")
  (Number "+" Number)
  (bool "::" "Bool")
  (number "::" "Int")
  ("If" "True" "Then" e "Else" e)
  ("If" "False" "Then" e "Else" e)
  (("(" "\\" var ":" type "." e ")") e)
Results:
  (eL(0/0:0$) "+" e(0/0:2)): e/0 → (e(e1) "+" e(0/0:2)): e/0
  	 where (recursion) eL(0/0:0$) → e(e1)
  (eL(0/0:0) "+" e(0/0:2$)): e/0 → (eL(0/0:0) "+" e(e1)): e/0
  	 where (recursion) e(0/0:2$) → e(e1)
  (eL(0/1:0$) "::" type(0/1:2)): e/1 → (e(e1) "::" type(0/1:2)): e/1
  	 where (recursion) eL(0/1:0$) → e(e1)
  (eL(0/2:0$) e(0/2:1)): e/2 → (e(e1) e(0/2:1)): e/2
  	 where (recursion) eL(0/2:0$) → e(e1)
  (eL(0/2:0) e(0/2:1$)): e/2 → (eL(0/2:0) e(e1)): e/2
  	 where (recursion) e(0/2:1$) → e(e1)
  ("(" "\\" var(0/3/2:2) ":" type(0/3/2:4) "." e(0/3/2:6$) ")"): eL/2 → ("(" "\\" var(0/3/2:2) ":" type(0/3/2:4) "." e(e1) ")"): eL/2
  	 where (recursion) e(0/3/2:6$) → e(e1)
  ("If" e(0/3/3:1$) "Then" e(0/3/3:3) "Else" e(0/3/3:5)): eL/3 → ("If" e(e1) "Then" e(0/3/3:3) "Else" e(0/3/3:5)): eL/3
  	 where (recursion) e(0/3/3:1$) → e(e1)
  ("If" e(0/3/3:1) "Then" e(0/3/3:3$) "Else" e(0/3/3:5)): eL/3 → ("If" e(0/3/3:1) "Then" e(e1) "Else" e(0/3/3:5)): eL/3
  	 where (recursion) e(0/3/3:3$) → e(e1)
  ("If" e(0/3/3:1) "Then" e(0/3/3:3) "Else" e(0/3/3:5$)): eL/3 → ("If" e(0/3/3:1) "Then" e(0/3/3:3) "Else" e(e1)): eL/3
  	 where (recursion) e(0/3/3:5$) → e(e1)
  ("(" e(0/3/4:1$) ")"): eL/4 → ("(" e(e1) ")"): eL/4
  	 where (recursion) e(0/3/4:1$) → e(e1)
  (Number0:0 "+" Number0:2): e/0 → Number( (Function call - ID not retrievable))
  (bool(0:0) "::" "Bool"): e/1 → bool(0:0)
  (number(0:0) "::" "Int"): e/1 → number(0:0)
  ("(" e(0:1) ")"): eL/4 → e(0:1)
  ("If" "True" "Then" e(0:3) "Else" e(0:5)): eL/3 → e(0:3)
  ("If" "False" "Then" e(0:3) "Else" e(0:5)): eL/3 → e(0:5)
  (("(" "\\" var(0:0:2) ":" type(0:0:4) "." e(0:0:6) ")"): eL/2 e(0:1)): e/2 → e( (Function call - ID not retrievable))

 Analysis of rule "EvalCtx" 
----------------------------

Applicable to:
  (eL "+" e)
  (eL "::" type)
  (eL e)
  ("(" "\\" var ":" type "." e ")")
  ("If" e "Then" e "Else" e)
  ("(" e ")")
Results:
  (eL(0/0:0$) "+" e(0/0:2)): e/0 → (e(e1) "+" e(0/0:2)): e/0
  	 where (recursion) eL(0/0:0$) → e(e1)
  (eL(0/0:0) "+" e(0/0:2$)): e/0 → (eL(0/0:0) "+" e(e1)): e/0
  	 where (recursion) e(0/0:2$) → e(e1)
  (eL(0/1:0$) "::" type(0/1:2)): e/1 → (e(e1) "::" type(0/1:2)): e/1
  	 where (recursion) eL(0/1:0$) → e(e1)
  (eL(0/2:0$) e(0/2:1)): e/2 → (e(e1) e(0/2:1)): e/2
  	 where (recursion) eL(0/2:0$) → e(e1)
  (eL(0/2:0) e(0/2:1$)): e/2 → (eL(0/2:0) e(e1)): e/2
  	 where (recursion) e(0/2:1$) → e(e1)
  ("(" "\\" var(0/3/2:2) ":" type(0/3/2:4) "." e(0/3/2:6$) ")"): eL/2 → ("(" "\\" var(0/3/2:2) ":" type(0/3/2:4) "." e(e1) ")"): eL/2
  	 where (recursion) e(0/3/2:6$) → e(e1)
  ("If" e(0/3/3:1$) "Then" e(0/3/3:3) "Else" e(0/3/3:5)): eL/3 → ("If" e(e1) "Then" e(0/3/3:3) "Else" e(0/3/3:5)): eL/3
  	 where (recursion) e(0/3/3:1$) → e(e1)
  ("If" e(0/3/3:1) "Then" e(0/3/3:3$) "Else" e(0/3/3:5)): eL/3 → ("If" e(0/3/3:1) "Then" e(e1) "Else" e(0/3/3:5)): eL/3
  	 where (recursion) e(0/3/3:3$) → e(e1)
  ("If" e(0/3/3:1) "Then" e(0/3/3:3) "Else" e(0/3/3:5$)): eL/3 → ("If" e(0/3/3:1) "Then" e(0/3/3:3) "Else" e(e1)): eL/3
  	 where (recursion) e(0/3/3:5$) → e(e1)
  ("(" e(0/3/4:1$) ")"): eL/4 → ("(" e(e1) ")"): eL/4
  	 where (recursion) e(0/3/4:1$) → e(e1)



 Analysis of rule "EvalPlus" 
-----------------------------

Applicable to:
  (Number "+" Number)
Results:
  (Number0:0 "+" Number0:2): e/0 → Number( (Function call - ID not retrievable))



 Analysis of rule "EvalAscrBool" 
---------------------------------

Applicable to:
  (bool "::" "Bool")
Results:
  (bool(0:0) "::" "Bool"): e/1 → bool(0:0)



 Analysis of rule "EvalAscrInt" 
--------------------------------

Applicable to:
  (number "::" "Int")
Results:
  (number(0:0) "::" "Int"): e/1 → number(0:0)



 Analysis of rule "EvalParens" 
-------------------------------

Applicable to:
  ("(" e ")")
Results:
  ("(" e(0:1) ")"): eL/4 → e(0:1)



 Analysis of rule "EvalIfTrue" 
-------------------------------

Applicable to:
  ("If" "True" "Then" e "Else" e)
Results:
  ("If" "True" "Then" e(0:3) "Else" e(0:5)): eL/3 → e(0:3)



 Analysis of rule "EvalIfFalse" 
--------------------------------

Applicable to:
  ("If" "False" "Then" e "Else" e)
Results:
  ("If" "False" "Then" e(0:3) "Else" e(0:5)): eL/3 → e(0:5)



 Analysis of rule "EvalLamApp" 
-------------------------------

Applicable to:
  (("(" "\\" var ":" type "." e ")") e)
Results:
  (("(" "\\" var(0:0:2) ":" type(0:0:4) "." e(0:0:6) ")"): eL/2 e(0:1)): e/2 → e( (Function call - ID not retrievable))


