Testcase 11
Test/STFL.language Test/examples.stfl e -l --plain

Warning:
  While checking the totality of function "abstract":
    Following calls will fall through:
      abstract(("Bool" (type typeSet)))
      abstract(("Int" (type typeSet)))
  While checking the totality of function "equate":
    Following calls will fall through:
      equate(type, type)
  
# "True" was parsed as:
True    bool.0
# "False" was parsed as:
False    bool.1
# "If True Then False Else True" was parsed as:
+  If       eL.3
|  True     bool.0
|  Then     eL.3
|  False    bool.1
|  Else     eL.3
|  True     bool.0
# "If (If True Then False Else True) Then False Else True" was parsed as:
+  If             eL.3
|  +  (           eL.4
|  |  +  If       eL.3
|  |  |  True     bool.0
|  |  |  Then     eL.3
|  |  |  False    bool.1
|  |  |  Else     eL.3
|  |  |  True     bool.0
|  |  )           eL.4
|  Then           eL.3
|  False          bool.1
|  Else           eL.3
|  True           bool.0
# "42" was parsed as:
42    Number.0
# "1 + 2" was parsed as:
+  1             Number.0
|  +    e.0
|  2             Number.0
# "(\\f : Int -> Int . f 5) (\\i : Int . i + 1)" was parsed as:
+  +  (                                    eL.2
|  |  \                                    eL.2
|  |  f                                             Identifier.0
|  |  :                                    eL.2
|  |  +  Int    typeL.0
|  |  |  ->     type.0
|  |  |  Int    typeL.0
|  |  .                                    eL.2
|  |  +  f                                          Identifier.0
|  |  |  5                                          Number.0
|  |  )                                    eL.2
|  +  (                                    eL.2
|  |  \                                    eL.2
|  |  i                                             Identifier.0
|  |  :                                    eL.2
|  |  Int       typeL.0
|  |  .                                    eL.2
|  |  +  i                                          Identifier.0
|  |  |  +                                 e.0
|  |  |  1                                          Number.0
|  |  )                                    eL.2
# "(True)" was parsed as:
+  (       eL.4
|  True    bool.0
|  )       eL.4
# "False :: Bool" was parsed as:
+  False                              bool.1
|  ::                                 e.1
|  Bool    typeL.1
# "( True )" was parsed as:
+  (       eL.4
|  True    bool.0
|  )       eL.4
# "(If True Then True Else True) :: Bool" was parsed as:
+  +  (                               eL.4
|  |  +  If                           eL.3
|  |  |  True                         bool.0
|  |  |  Then                         eL.3
|  |  |  True                         bool.0
|  |  |  Else                         eL.3
|  |  |  True                         bool.0
|  |  )                               eL.4
|  ::                                 e.1
|  Bool    typeL.1
# "True" was parsed as:
True    bool.0
# "(False)" was parsed as:
+  (        eL.4
|  False    bool.1
|  )        eL.4
# "True :: Bool" was parsed as:
+  True                               bool.0
|  ::                                 e.1
|  Bool    typeL.1
# "If True Then 42 Else 43" was parsed as:
+  If      eL.3
|  True    bool.0
|  Then    eL.3
|  42               Number.0
|  Else    eL.3
|  43               Number.0
# "If False Then 23 Else 44" was parsed as:
+  If       eL.3
|  False    bool.1
|  Then     eL.3
|  23                Number.0
|  Else     eL.3
|  44                Number.0
# "5 + 6" was parsed as:
+  5             Number.0
|  +    e.0
|  6             Number.0
# "5 + 6 + 7" was parsed as:
+  5                Number.0
|  +       e.0
|  +  6             Number.0
|  |  +    e.0
|  |  7             Number.0
# "(\\x : Int . x + 1) 5" was parsed as:
+  +  (                                 eL.2
|  |  \                                 eL.2
|  |  x                                          Identifier.0
|  |  :                                 eL.2
|  |  Int    typeL.0
|  |  .                                 eL.2
|  |  +  x                                       Identifier.0
|  |  |  +                              e.0
|  |  |  1                                       Number.0
|  |  )                                 eL.2
|  5                                             Number.0
# "If (If True Then False Else True) Then 123456 Else 42" was parsed as:
+  If             eL.3
|  +  (           eL.4
|  |  +  If       eL.3
|  |  |  True     bool.0
|  |  |  Then     eL.3
|  |  |  False    bool.1
|  |  |  Else     eL.3
|  |  |  True     bool.0
|  |  )           eL.4
|  Then           eL.3
|  123456                  Number.0
|  Else           eL.3
|  42                      Number.0
# "5 + (6 + 7)" was parsed as:
+  5                   Number.0
|  +          e.0
|  +  (       eL.4
|  |  +  6             Number.0
|  |  |  +    e.0
|  |  |  7             Number.0
|  |  )       eL.4
# "(5 + 6) + (7 + 8)" was parsed as:
+  +  (       eL.4
|  |  +  5             Number.0
|  |  |  +    e.0
|  |  |  6             Number.0
|  |  )       eL.4
|  +          e.0
|  +  (       eL.4
|  |  +  7             Number.0
|  |  |  +    e.0
|  |  |  8             Number.0
|  |  )       eL.4
# "5 + (6 + (7 + 8))" was parsed as:
+  5                         Number.0
|  +                e.0
|  +  (             eL.4
|  |  +  6                   Number.0
|  |  |  +          e.0
|  |  |  +  (       eL.4
|  |  |  |  +  7             Number.0
|  |  |  |  |  +    e.0
|  |  |  |  |  8             Number.0
|  |  |  |  )       eL.4
|  |  )             eL.4
# "(\\x : Int . x + 1) True" was parsed as:
+  +  (                                 eL.2
|  |  \                                 eL.2
|  |  x                                          Identifier.0
|  |  :                                 eL.2
|  |  Int    typeL.0
|  |  .                                 eL.2
|  |  +  x                                       Identifier.0
|  |  |  +                              e.0
|  |  |  1                                       Number.0
|  |  )                                 eL.2
|  True                                 bool.0
