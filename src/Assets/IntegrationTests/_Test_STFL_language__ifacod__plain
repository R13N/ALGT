Output {_files = fromList [], _stdOut = ["Warning:","  While checking the totality of function \"abstract\":","    Following calls will fall through:","      abstract((\"Bool\" (type typeSet)))","      abstract((\"Int\" (type typeSet)))","  While checking the totality of function \"equate\":","    Following calls will fall through:","      equate(type, type)","  ",""," Analysis of cod : type -> type ","================================","","    ","     Analysis of clause 0 ","    ......................","    ","    Clause: ","      cod(T1 \"->\" T2)          = T2","    ","    Possible inputs at this point: ","    #  (type)","    ","    ","    Possible results: ","    0   (typeL(0/0:0) \"->\" type(0/0:2)): type/0\t--> type(0/0:2)     : \"type\"","    ","    ","    ","    ","    ","     Analysis of clause 1 ","    ......................","    ","    Clause: ","      cod(\"Bool\")              = !error:\603(\"Not defined for Bool\")","    ","    Possible inputs at this point: ","    #  (\"Bool\")","    #  (\"Int\")","    ","    ","    Possible results: ","    1   \"Bool\"                    \t--> \603( (Function call - ID not retrievable)) : \"\\603\"","    ","    ","    ","    ","    ","     Analysis of clause 2 ","    ......................","    ","    Clause: ","      cod(\"Int\")               = !error:\603(\"Not defined for Int\")","    ","    Possible inputs at this point: ","    #  (\"Int\")","    ","    ","    Possible results: ","    2   \"Int\"                     \t--> \603( (Function call - ID not retrievable)) : \"\\603\"","    ","    ","    ","    ","  ","   Falthrough ","  ------------","  ","  No fallthrough is possible","  "]}