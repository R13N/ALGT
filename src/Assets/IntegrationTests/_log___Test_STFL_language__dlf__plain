Test/STFL.language --dlf --plain

Warning:
  While checking the totality of function "abstract":
    Following calls will fall through:
      abstract(("Bool" (type typeSet)))
      abstract(("Int" (type typeSet)))
  While checking the totality of function "equate":
    Following calls will fall through:
      equate(type, type)
  
  While checking that the functions do have the strictest possible types:
    "plus" can be typed as "Number", instead of a "number"

  STFL 
 ******


 Syntax 
========

bool             ::= "True"
                 | "False"
e                ::= eL "+" e
                 | eL "::" type
                 | eL e
                 | eL
eL               ::= value
                 | var
                 | "(" "\\" var ":" type "." e ")"
                 | "If" e "Then" e "Else" e
                 | "(" e ")"
number           ::= Number
type             ::= typeL "->" type
                 | typeL
typeL            ::= "Int"
                 | "Bool"
                 | ParO type ParC
typeSet          ::= type typeSet
                 | "$"
typing           ::= var ":" type
typingEnvironment::= typing "," typingEnvironment
                 | "{}"
value            ::= bool
                 | number
var              ::= Identifier



 Syntax Highlighting 
=====================

bool	 -> "constant"
e	 -> "statement"
eL	 -> "statement"
eL.2	 -> "noise"
eL.4	 -> "noise"
number	 -> "constant"
type	 -> "type"
typeL	 -> "type"
var	 -> "identifier"




 Functions 
===========

abstract                 : typeSet -> type
abstract("$")            = !error:ɛ("Undefined")
abstract("Int" "$")      = "Int"
abstract("Bool" "$")     = "Bool"
abstract((T1 "->" T2) ts)
                         = abstract(domains((T1 "->" T2) ts)) "->" abstract(codomains((T1 "->" T2) ts))


cod                      : type -> type
cod(T1 "->" T2)          = T2
cod("Bool")              = !error:ɛ("Not defined for Bool")
cod("Int")               = !error:ɛ("Not defined for Int")


codomains                : typeSet -> typeSet
codomains((_ "->" T2) ts)
                         = T2 codomains(ts)
codomains("$")           = "$"
codomains(_)             = !error:ɛ("Not defined, as this is not a proper list of functions")


defaultValue             : type -> eL
defaultValue("Bool")     = "True"
defaultValue("Int")      = 1
defaultValue(ta "->" tr) = "(" "\\" "x" ":" ta "." defaultValue(tr) ")"


dom                      : type -> typeL
dom(T1 "->" T2)          = T1
dom("Bool")              = !error:ɛ("Not defined for Bool")
dom("Int")               = !error:ɛ("Not defined for Int")


domains                  : typeSet -> typeSet
domains((T1 "->" _) ts)  = T1 domains(ts)
domains("$")             = "$"
domains(_)               = !error:ɛ("Not defined, as this is not a proper list of functions")


equate                   : type -> type -> type
equate(T, T)             = T


eval                     : e -> value
eval((v:value))          = v
eval(("(" "\\" x ":" t "." e ")") arg)
                         = eval(!subs:e(x, arg, e))
eval(f a)                = eval(eval(f) a)
eval("If" "True" "Then" e1 "Else" e2)
                         = eval(e1)
eval("If" "False" "Then" e1 "Else" e2)
                         = eval(e2)
eval("If" c "Then" e1 "Else" e2)
                         = eval("If" eval(c) "Then" e1 "Else" e2)
eval("(" e ")")          = eval(e)
eval(e1 "+" e2)          = !plus:Number(eval(e1), eval(e2))
eval(e "::" t)           = eval(e)
eval((v:var))            = !error:ɛ("Unknown variable", v)
eval("(" "\\" v ":" t "." e ")")
                         = !error:ɛ("Lone lambda expression left")


plus                     : number -> e -> number
plus(e1, e2)             = !plus:Number(e1, e2)


rename                   : var -> var -> type -> e -> eL
rename(x, newVar, type, body)
                         = "(" "\\" newVar ":" type "." !subs:e(x, newVar, body) ")"




 Relations 
===========

(→) 	: e (in), e (out)	Pronounced as "evaluation"
(→*) 	: e (in), value (out)	Pronounced as "big step"
(✓) 	: e (in)	Pronounced as "is canonical"
(⊢) 	: typingEnvironment (in), e (in), type (out)	Pronounced as "context entails typing"
(::) 	: e (in), type (out)	Pronounced as "type in empty context"
(==) 	: type (in), type (in)	Pronounced as "equals"



 Rules 
=======



#  Rules about "evaluation", with symbol (→) 
# -------------------------------------------


 e0 → e1
----------------  	[EvalCtx]
 e[e0] → e[e1]


 n1: number	n2: number
------------------------------------  	[EvalPlus]
 (n1:number) "+" n2 → plus(n1, n2)


 b: bool
--------------------  	[EvalAscrBool]
 b "::" "Bool" → b


 i: number
-------------------  	[EvalAscrInt]
 i "::" "Int" → i


 
----------------  	[EvalParens]
 "(" e ")" → e


 
---------------------------------------  	[EvalIfTrue]
 "If" "True" "Then" e1 "Else" e2 → e1


 
----------------------------------------  	[EvalIfFalse]
 "If" "False" "Then" e1 "Else" e2 → e2


 
---------------------------------------------------------------  	[EvalLamApp]
 ("(" "\\" var ":" type "." e ")") arg → !subs:e(var, arg, e)






#  Rules about "big step", with symbol (→*) 
# ------------------------------------------


 (✓) e
---------  	[BigStepCanon]
 e →* e


 e0 → e1	e1 →* e2
--------------------------  	[BigStepRec]
 e0 →* e2


 e0 → e1	(✓) e1
------------------------  	[BigStepBase]
 e0 →* e1






#  Rules about "is canonical", with symbol (✓) 
# ---------------------------------------------


 b: bool
----------  	[CanonBool]
 (✓) b


 n: number
------------  	[CanonNumber]
 (✓) n






#  Rules about "context entails typing", with symbol (⊢) 
# -------------------------------------------------------


 n: number
---------------  	[Tnumber]
 Γ ⊢ n, "Int"


 b: bool
----------------  	[Tbool]
 Γ ⊢ b, "Bool"


 Γ ⊢ e, T
-------------------  	[TParens]
 Γ ⊢ "(" e ")", T


 Γ ⊢ e, T'	T' == T
-------------------------  	[TAscr]
 Γ ⊢ e "::" T, T'


 
--------------------  	[Tx]
 Γ[x ":" T] ⊢ x, T


 Γ ⊢ n1, "Int"	Γ ⊢ n2, "Int"
-------------------------------  	[TPlus]
 Γ ⊢ n1 "+" n2, "Int"


 Γ ⊢ c, "Bool"	Γ ⊢ e1, Tl	Γ ⊢ e2, Tr	Tl == Tr
----------------------------------------------------------  	[TIf]
 Γ ⊢ "If" c "Then" e1 "Else" e2, Tl


 (x ":" T1) "," Γ ⊢ e, T2
----------------------------------------------  	[TLambda]
 Γ ⊢ "(" "\\" x ":" T1 "." e ")", T1 "->" T2


 Γ ⊢ e1, Tfunc	Γ ⊢ e2, Targ	Targ == dom(Tfunc)
----------------------------------------------------  	[Tapp]
 Γ ⊢ e1 e2, cod(Tfunc)






#  Rules about "type in empty context", with symbol (::) 
# -------------------------------------------------------


 "{}" ⊢ e, T
--------------  	[TEmptyCtx]
 e :: T






#  Rules about "equals", with symbol (==) 
# ----------------------------------------


 T1 = T2 : type
-----------------  	[EqBase]
 T1 == T2


 Ta1 == Ta2	Tb1 == Tb2
-------------------------------  	[EqArrow]
 Ta1 "->" Tb1 == Ta2 "->" Tb2






 Properties 
============


 e0 :: T	e0 → e1
-------------------------  	[Preservation]
 e1 :: T


 e0 :: T
---------------------------  	[Progress]
 (✓) e0 	| e0 → e1


 e :: T
---------  	[Termination]
 e →* v


