Test/STFL.typesystem Test/examples.stfl e --tpa --ppp

Warning:
  While checking the totality of function "cod":
    Following calls will fall through:
      cod("Int")
      cod("Bool")
  While checking the totality of function "dom":
    Following calls will fall through:
      dom("Int")
      dom("Bool")
  While checking the totality of function "eval":
    Following calls will fall through:
      eval(("(" "\\" var ":" type "." e ")"))
  
  While checking that the functions do have the strictest possible types:
    "dom" can be typed as "typeL", instead of a "type"
                                                                                
 Test/examples.stfl 
====================

Property Preservation holds for given examples
Property successfull
# Property Preservation proven by failing predicate with assignment {e0 --> True}:
  # Success: e0 :: T
  # Failed: e0 → e1
# e0 → e1 failed because: 
  While trying to proof that (→) is applicable to "True":
    Not a single rule matched:
    While trying to intepret the rule EvalCtx with True:
      Could not match e[e0] /= "True"
    While trying to intepret the rule EvalPlus with True:
      Could not match (n1:number) "+" n2 /= "True"
    While trying to intepret the rule EvalAscrBool with True:
      Could not match b "::" "Bool" /= "True"
    While trying to intepret the rule EvalAscrInt with True:
      Could not match i "::" "Int" /= "True"
    While trying to intepret the rule EvalAscrPar with True:
      Could not match e "::" ("(" t ")") /= "True"
    While trying to intepret the rule EvalParens with True:
      Could not match "(" e ")" /= "True"
    While trying to intepret the rule EvalIfTrue with True:
      Could not match "If" "True" "Then" e1 "Else" e2 /= "True"
    While trying to intepret the rule EvalIfFalse with True:
      Could not match "If" "False" "Then" e1 "Else" e2 /= "True"
    While trying to intepret the rule EvalLamApp with True:
      Could not match ("(" "\\" var ":" type "." e ")") arg /= "True"
Property Progress holds for given examples
Property successfull
# Property Progress statisfied with assignment {T --> Bool, e0 --> True}
  # Predicate satisfied:
  # e0 :: T
  
    True : bool
    --------------- [Tbool]
    {} ⊢ True, Bool
    ----------------------- [TEmptyCtx]
    True :: Bool
  
  
  
  # Satisfies a possible conclusion:
  # (✓) e0
  
  True : bool
  ----------- [CanonBool]
  (✓) True
  
  
Property Termination holds for given examples
Property successfull
# Property Termination statisfied with assignment {T --> Bool, e --> True}
  # Predicate satisfied:
  # e :: T
  
    True : bool
    --------------- [Tbool]
    {} ⊢ True, Bool
    ----------------------- [TEmptyCtx]
    True :: Bool
  
  
  
  # Satisfies a possible conclusion:
  # e →* v
  
  True : bool
  ----------- [CanonBool]
  (✓) True
  ----------------------- [BigStepCanon]
  True →* True
  
  
