Output {_files = [], _stdOut = ["Warning:\n  While checking the totality of function \"cod\":\n    Following calls will fall through:\n      cod(\"Int\")\n      cod(\"Bool\")\n  While checking the totality of function \"dom\":\n    Following calls will fall through:\n      dom(\"Int\")\n      dom(\"Bool\")\n  While checking the totality of function \"eval\":\n    Following calls will fall through:\n      eval((\"(\" \"\\\\\" var \":\" type \".\" e \")\"))\n  \n  While checking that the functions do have the strictest possible types:\n    \"dom\" can be typed as \"typeL\", instead of a \"type\"","\n  Dynamized STFL \n ****************\n\n\n Syntax \n========\n\nbool             ::= \"True\"\n                 | \"False\"\ne                ::= eL \"+\" e\n                 | eL \"::\" type\n                 | eL e\n                 | eL\neL               ::= value\n                 | var\n                 | \"(\" \"\\\\\" var \":\" type \".\" e \")\"\n                 | \"If\" e \"Then\" e \"Else\" e\n                 | \"(\" e \")\"\n                 | \"TYPE ERROR\"\nnumber           ::= Number\ntype             ::= typeL \"->\" type\n                 | typeL\ntypeL            ::= \"Int\"\n                 | \"Bool\"\n                 | \"(\" type \")\"\ntyping           ::= var \":\" type\ntypingEnvironment::= typing \",\" typingEnvironment\n                 | \"{}\"\nvalue            ::= bool\n                 | number\nvar              ::= Identifier\n\n\n\n Syntax Highlighting \n=====================\n\nbool\t -> \"constant\"\ne\t -> \"statement\"\neL\t -> \"statement\"\neL.4\t -> \"keyword\"\nnumber\t -> \"constant\"\ntype\t -> \"type\"\ntypeL\t -> \"type\"\nvar\t -> \"identifier\"\n\n\n\n\n Functions \n===========\n\ncod                      : type -> type\ncod(\"(\" T \")\")           = \"(\" cod(T) \")\"\ncod(T1 \"->\" T2)          = T2\n\n\ndefaultValue             : type -> e\ndefaultValue(\"Bool\")     = \"True\"\ndefaultValue(\"Int\")      = 1\ndefaultValue(ta \"->\" tr) = \"(\" \"\\\\\" \"x\" \":\" ta \".\" defaultValue(tr) \")\"\ndefaultValue(\"(\" t \")\")  = defaultValue(t)\n\n\ndom                      : type -> type\ndom(\"(\" T \")\")           = \"(\" dom(T) \")\"\ndom(T1 \"->\" T2)          = T1\n\n\neval                     : e -> value\neval((v:value))          = v\neval((\"(\" \"\\\\\" x \":\" t \".\" e \")\") arg)\n                         = eval(subs(x, arg, e))\neval(f a)                = eval(eval(f) a)\neval(\"If\" \"True\" \"Then\" e1 \"Else\" e2)\n                         = eval(e1)\neval(\"If\" \"False\" \"Then\" e1 \"Else\" e2)\n                         = eval(e2)\neval(\"If\" c \"Then\" e1 \"Else\" e2)\n                         = eval(\"If\" eval(c) \"Then\" e1 \"Else\" e2)\neval(\"(\" e \")\")          = eval(e)\neval(e1 \"+\" e2)          = !plus(eval(e1), eval(e2))\neval(e \"::\" t)           = eval(e)\neval((v:var))            = !error(\"Unknown variable\", v)\n\n\nid                       : e -> e\nid(e)                    = e\n\n\nplus                     : number -> e -> number\nplus(e1, e2)             = !plus(e1, e2)\n\n\nrename                   : var -> var -> type -> e -> eL\nrename(x, newVar, type, body)\n                         = \"(\" \"\\\\\" newVar \":\" type \".\" subs(x, newVar, body) \")\"\n\n\nsubs                     : var -> e -> e -> e\nsubs(x, y, x)            = y\nsubs(x, y, \"(\" \"\\\\\" x \":\" t \".\" rest \")\")\n                         = subs(x, y, rename(x, !newvar(x, rest), t, rest))\nsubs(x, y, \"(\" \"\\\\\" z \":\" t \".\" rest \")\")\n                         = \"(\" \"\\\\\" z \":\" t \".\" subs(x, y, rest) \")\"\nsubs(x, y, \"If\" cond \"Then\" e1 \"Else\" e2)\n                         = \"If\" subs(x, y, cond) \"Then\" subs(x, y, e1) \"Else\" subs(x, y, e2)\nsubs(x, y, e1 \"+\" e2)    = subs(x, y, e1) \"+\" subs(x, y, e2)\nsubs(x, y, e \"::\" type)  = subs(x, y, e) \"::\" type\nsubs(x, y, f arg)        = subs(x, y, f) subs(x, y, arg)\nsubs(x, y, \"(\" e \")\")    = \"(\" subs(x, y, e) \")\"\nsubs(x, y, z)            = z\n\n\n\n\n Relations \n===========\n\n(::) \t: e (in), type (out)\tPronounced as \"type in empty context\"\n(==) \t: type (in), type (in)\tPronounced as \"equals\"\n(\8594) \t: e (in), e (out)\tPronounced as \"evaluation\"\n(\8594*) \t: e (in), e (out)\tPronounced as \"big step\"\n(\8866) \t: typingEnvironment (in), e (in), type (out)\tPronounced as \"context entails typing\"\n(\10003) \t: e (in)\tPronounced as \"is canonical\"\n\n\n\n Rules \n=======\n\n\n\n#  Rules about \"type in empty context\", with symbol (::) \n# -------------------------------------------------------\n\n\n \"{}\" \8866 e, T\n--------------  \t[TEmptyCtx]\n e :: T\n\n\n\n\n\n\n#  Rules about \"equals\", with symbol (==) \n# ----------------------------------------\n\n\n Ta1 == Ta2\tTb1 == Tb2\n------------------------------  \t[EqArrow]\n Ta1 \"->\" Tb1 == Ta2 \"->\" Tb2\n\n\n T1 = T2 : type\n-----------------  \t[EqBase]\n T1 == T2\n\n\n T1 == T2\n------------------  \t[EqParL]\n \"(\" T1 \")\" == T2\n\n\n T1 == T2\n------------------  \t[EqParR]\n T1 == \"(\" T2 \")\"\n\n\n\n\n\n\n#  Rules about \"evaluation\", with symbol (\8594) \n# -------------------------------------------\n\n\n b: bool\n-------------------  \t[EvalAscrBool]\n b \"::\" \"Bool\" \8594 b\n\n\n i: number\n------------------  \t[EvalAscrInt]\n i \"::\" \"Int\" \8594 i\n\n\n e \"::\" t \8594 e\n------------------------  \t[EvalAscrPar]\n e \"::\" (\"(\" t \")\") \8594 e\n\n\n e: number\n------------------------------  \t[EvalCastBoolErr]\n e \"::\" \"Bool\" \8594 \"TYPE ERROR\"\n\n\n e: bool\n-----------------------------  \t[EvalCastIntErr]\n e \"::\" \"Int\" \8594 \"TYPE ERROR\"\n\n\n e0 \8594 e1\n---------------  \t[EvalCtx]\n e[e0] \8594 e[e1]\n\n\n \n-------------------------------------------------------  \t[EvalIfErr]\n \"If\" (cond:number) \"Then\" e1 \"Else\" e2 \8594 \"TYPE ERROR\"\n\n\n \n---------------------------------------  \t[EvalIfFalse]\n \"If\" \"False\" \"Then\" e1 \"Else\" e2 \8594 e2\n\n\n \n--------------------------------------  \t[EvalIfTrue]\n \"If\" \"True\" \"Then\" e1 \"Else\" e2 \8594 e1\n\n\n (\10003) arg\targ \"::\" type \8594 arg'\n------------------------------------------------------------  \t[EvalLamApp]\n (\"(\" \"\\\\\" var \":\" type \".\" e \")\") arg \8594 subs(var, arg', e)\n\n\n \n---------------  \t[EvalParens]\n \"(\" e \")\" \8594 e\n\n\n n1: number\tn2: number\n-----------------------------------  \t[EvalPlus]\n (n1:number) \"+\" n2 \8594 plus(n1, n2)\n\n\n \n---------------------------------  \t[EvalPlusErrL]\n (n1:bool) \"+\" n2 \8594 \"TYPE ERROR\"\n\n\n \n---------------------------------  \t[EvalPlusErrR]\n n1 \"+\" (n2:bool) \8594 \"TYPE ERROR\"\n\n\n\n\n\n\n#  Rules about \"big step\", with symbol (\8594*) \n# ------------------------------------------\n\n\n e0 \8594 e1\t(\10003) e1\n------------------------  \t[BigStepBase]\n e0 \8594* e1\n\n\n (\10003) e\n--------  \t[BigStepCanon]\n e \8594* e\n\n\n e0 \8594 e1\te1 \8594* e2\n--------------------------  \t[BigStepRec]\n e0 \8594* e2\n\n\n\n\n\n\n#  Rules about \"context entails typing\", with symbol (\8866) \n# -------------------------------------------------------\n\n\n \915 \8866 e, T'\tT' == T\n-------------------------  \t[TAscr]\n \915 \8866 e \"::\" T, T'\n\n\n \915 \8866 c, \"Bool\"\t\915 \8866 e1, Tl\t\915 \8866 e2, Tr\tTl == Tr\n----------------------------------------------------------  \t[TIf]\n \915 \8866 \"If\" c \"Then\" e1 \"Else\" e2, Tl\n\n\n (x \":\" T1) \",\" \915 \8866 e, T2\n-------------------------------------------------------  \t[TLambda]\n \915 \8866 \"(\" \"\\\\\" x \":\" T1 \".\" e \")\", (\"(\" T1 \")\") \"->\" T2\n\n\n \915 \8866 e, T\n------------------  \t[TParens]\n \915 \8866 \"(\" e \")\", T\n\n\n \915 \8866 n1, \"Int\"\t\915 \8866 n2, \"Int\"\n-------------------------------  \t[TPlus]\n \915 \8866 n1 \"+\" n2, \"Int\"\n\n\n \915 \8866 e1, Tfunc\t\915 \8866 e2, Targ\tTarg == dom(Tfunc)\n----------------------------------------------------  \t[Tapp]\n \915 \8866 e1 e2, cod(Tfunc)\n\n\n b: bool\n---------------  \t[Tbool]\n \915 \8866 b, \"Bool\"\n\n\n n: number\n--------------  \t[Tnumber]\n \915 \8866 n, \"Int\"\n\n\n \n-------------------  \t[Tx]\n \915[x \":\" T] \8866 x, T\n\n\n\n\n\n\n#  Rules about \"is canonical\", with symbol (\10003) \n# ---------------------------------------------\n\n\n b: bool\n----------  \t[CanonBool]\n (\10003) b\n\n\n \n------------------  \t[CanonError]\n (\10003) \"TYPE ERROR\"\n\n\n n: number\n------------  \t[CanonNumber]\n (\10003) n\n\n\n\n\n"]}