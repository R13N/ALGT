Test/STFL.typesystem --ir EvalCtx

Warning:
  While checking the totality of function "cod":
    Following calls will fall through:
      cod("Int")
      cod("Bool")
  While checking the totality of function "dom":
    Following calls will fall through:
      dom("Int")
      dom("Bool")
  While checking the totality of function "eval":
    Following calls will fall through:
      eval(("(" "\\" var ":" type "." e ")"))
  
  While checking that the functions do have the strictest possible types:
    "dom" can be typed as "typeL", instead of a "type"

 Analysis of rule EvalCtx 
--------------------------

Applicable to:
  (eL "+" e)
  (eL "::" type)
  (eL e)
  ("(" "\\" var ":" type "." e ")")
  ("If" e "Then" e "Else" e)
  ("(" e ")")
Results:
  (eL0/0:0$ "+" : e e0/0:2) : e → (ee1 "+" : e e0/0:2) : e
  	 where (recursion) eL0/0:0$ → ee1
  (eL0/0:0 "+" : e e0/0:2$) : e → (eL0/0:0 "+" : e ee1) : e
  	 where (recursion) e0/0:2$ → ee1
  (eL0/1:0$ "::" : e type0/1:2) : e → (ee1 "::" : e type0/1:2) : e
  	 where (recursion) eL0/1:0$ → ee1
  (eL0/2:0$ e0/2:1) : e → (ee1 e0/2:1) : e
  	 where (recursion) eL0/2:0$ → ee1
  (eL0/2:0 e0/2:1$) : e → (eL0/2:0 ee1) : e
  	 where (recursion) e0/2:1$ → ee1
  ("(" : eL "\\" : eL var0/3/2:2 ":" : eL type0/3/2:4 "." : eL e0/3/2:6$ ")" : eL) : eL → ("(" : eL "\\" : eL var0/3/2:2 ":" : eL type0/3/2:4 "." : eL ee1 ")" : eL) : eL
  	 where (recursion) e0/3/2:6$ → ee1
  ("If" : eL e0/3/3:1$ "Then" : eL e0/3/3:3 "Else" : eL e0/3/3:5) : eL → ("If" : eL ee1 "Then" : eL e0/3/3:3 "Else" : eL e0/3/3:5) : eL
  	 where (recursion) e0/3/3:1$ → ee1
  ("If" : eL e0/3/3:1 "Then" : eL e0/3/3:3$ "Else" : eL e0/3/3:5) : eL → ("If" : eL e0/3/3:1 "Then" : eL ee1 "Else" : eL e0/3/3:5) : eL
  	 where (recursion) e0/3/3:3$ → ee1
  ("If" : eL e0/3/3:1 "Then" : eL e0/3/3:3 "Else" : eL e0/3/3:5$) : eL → ("If" : eL e0/3/3:1 "Then" : eL e0/3/3:3 "Else" : eL ee1) : eL
  	 where (recursion) e0/3/3:5$ → ee1
  ("(" : eL e0/3/4:1$ ")" : eL) : eL → ("(" : eL ee1 ")" : eL) : eL
  	 where (recursion) e0/3/4:1$ → ee1

