 
 STFL 
******

# A Simply Typed Function Language

 Syntax
========

bool	::= "True" | "False"


# Types
typeL	::= "Int" | "Bool" | "(" type ")"
type	::= typeL "->" type | typeL



var	::= Identifier
number	::= Number
value	::= bool | number

e	::= eL "+" e 
	| eL "::" type 
	| eL e
	| eL

eL	::= value 
	| var 
	| "(" "\\" var ":" type "." e ")" 
	| "If" e "Then" e "Else" e | "(" e ")"


 Functions
===========



subs						: var -> e -> e -> e
subs(x, y, x)					= y
subs(x, y, "(" "\\" z ":" t "." rest ")" )	= "(" "\\" z ":" t "." subs(x,y,rest) ")"
subs(x, y, "If" cond "Then" e1 "Else" e2)	= "If" subs(x, y, cond) "Then" subs(x, y, e1) "Else" subs(x, y, e2)
subs(x, y, e1 "+" e2)				= subs(x, y, e1) "+" subs(x, y, e2)
subs(x, y, e "::" type)				= subs(x, y, e) "::" type
subs(x, y, f arg)				= subs(x, y, f) subs(x, y, arg) 
subs(x, y, "(" e ")")				= "(" subs(x, y, e) ")"
subs(x, y, z) 					= z
