
 Style
*******

Syntax
======

commentChars	::= LineChar commentChars | LineChar
comment		::= $ "#" commentChars
nls		::= "\n" comment nls | "\n" nls | "\n"

dash		::= "-"
questionMark	::= "?"

identChar	::= Lower | Digit | dash
identifier	//= $ identChar identifier | identChar
midentifier	::= identifier | "Default"


stars		::= $ "*" stars | "*"
equals		::= $ "=" equals | "="
dashes		::= $ dash dashes | dash

title		::= nls identifier "\n" stars nls

constantsHeader	::= "Constants" "\n" equals nls
defaultsHeader	::= "Defaults" "\n" equals nls
stylesHeader	::= "Styles" "\n" equals


color		//= $ "#" Hex Hex Hex Hex Hex Hex
value		::= String | Number | color
mvalue		::= value | questionMark
constant	::= identifier "=" value
constants	::= constant nls constants | constant

property	::= identifier ":" identifier | constant
properties	::= property nls properties | property


styleHeader	::= nls identifier "(" identifier ")" nls dashes nls # with a fallback given
		| nls identifier nls dashes nls
style		::= styleHeader properties
styles		::= style styles | style


constantsSect	::= constantsHeader constants nls | nls
defaultsSect	::= defaultsHeader properties nls | nls
stylesSect	::= stylesHeader styles nls	| nls
styleFile	::= title constantsSect defaultsSect stylesSect

knownStyles	::= identifier knownStyles | identifier

 Syntax Style
==============



Functions
=========

test		: styleFile -> mvalue
test(sf)	= getPropertyFor(expandFile(sf), "noise", "foreground-color")


knownStyles	: styles -> knownStyles
knownStyles(style (styles:styles))
		= styleName(style) knownStyles(styles)
knownStyles(style)
		= styleName(style)


knownStylesIn	: styleFile -> knownStyles
knownStylesIn(_ _ _ (_ (styles:styles) _))
		= knownStyles(styles)

# Constants expansion before lookups

prepareFile	: styleFile -> styleFile
prepareFile(sf)	= check(expandFile(sf))

expandFile	: styleFile -> styleFile
expandFile(title (_ (constants:constants) _) defaultSect styleSect)
		= title "\n" expandDefaults(constants, defaultSect) expandStyleSect(constants, styleSect)
expandFile(title nl defs styles)
		= title nl defs styles


expandStyleSect	: constants -> stylesSect -> stylesSect
expandStyleSect(c, h s nls)
		= h expandStyles(c, s) nls
expandStyleSect(_, nls)
		= nls

expandStyles : constants -> styles -> styles
expandStyles(c, style (styles:styles))
		= expandStyle(c, style) expandStyles(c, styles)
expandStyles(c, style)
		= expandStyle(c, style)

expandStyle	: constants -> style -> style
expandStyle(c, h props)
		= h expandProperties(c, props)

expandDefaults	: constants -> defaultsSect -> defaultsSect
expandDefaults(c, h props nls)
		= h expandProperties(c, props) nls
expandDefaults(_, defs)
		= defs

expandProperties	: constants -> properties -> properties
expandProperties(c, (n ":" key) nls props)
		= (n "=" findConstant(c, key)) nls expandProperties(c, props)
expandProperties(c, p nls props)
		= p nls expandProperties(c, props)
expandProperties(c, (p ":" key:property))
		= p "=" findConstant(c, key)
expandProperties(_, (p "=" key))
		= p "=" key

check		: styleFile -> styleFile
check(sf)	= checkLoops(sf)

checkLoops	: styleFile -> styleFile
checkLoops(t c d (sth styles nls))
		= t c d (sth checkAllLoops(styles, styles) nls)
checkLoops(sf)	= sf	# the case that no styles at all are defined

checkAllLoops	: styles -> styles -> styles
checkAllLoops(allStyles, (style:style))
		= checkLoopsFrom(allStyles, styleName(style), styleName(style))	# we've done everything


checkLoopsFrom	: styles -> identifier -> midentifier -> styles
checkLoopsFrom(styles, start, start)
		= !error:styles("Walking in a cycle from", start)
checkLoopsFrom(styles, start, "Default")
		= styles # We did hit a 'no fallback' case, all done!
checkLoopsFrom(styles, start, current)
		= checkLoopsFrom(styles, start, fallbackFor(findStyle(styles, current)))




# Actual lookups

getPropertyFor	: styleFile -> identifier -> identifier -> mvalue
getPropertyFor(title constants defaults styles, styleN, propN)
		= withDefault(findPropertyInDefaults(defaults, propN), getPropertyForS(title constants defaults styles, findStyleIn(styles, styleN), propN))

getDefaultPropertyFor	: styleFile -> identifier -> mvalue
getDefaultPropertyFor(title _ defaults _, propN)
		= findPropertyInDefaults(defaults, propN)

getPropertyForS	: styleFile -> style -> identifier -> mvalue
getPropertyForS(sf, style, propN)	
		= findPropertyIn(style, propN) 

withDefault	: mvalue -> mvalue -> mvalue
withDefault(default, "?")
		= default
withDefault(_, found)
		= found



findPropertyIn	: style -> identifier -> mvalue
findPropertyIn(header props, id)
		= findProperty(props, id)




fallbackFor	: style -> midentifier
fallbackFor((_ _ "(" fb ")" _ _ _) props)
		= fb
fallbackFor(_)	= "Default"


findStyleIn	: stylesSect -> identifier -> style
findStyleIn(_ (styles:styles) _, id)
		= findStyle(styles, id)
findStyleIn(_, id)
		= !error:style("No stylesection defined")



findStyle	: styles -> identifier -> style
findStyle(((_ key "(" fb ")" _ dashes _) properties) styles, key)
		= ("\n" key "(" fb ")" "\n" dashes "\n") properties
findStyle(((_ key _ dashes _) properties) styles, key)
		= ("\n" key "\n" dashes "\n") properties
findStyle(_ (styles:styles), key)
		= findStyle(styles, key)
findStyle((_ key "(" fb ")" _ dashes _) properties, key)
		= ("\n" key "(" fb ")" "\n" dashes "\n") properties
findStyle((_ key _ dashes _) properties, key)
		= ("\n" key "\n" dashes "\n") properties
findStyle((rest:style), styleN)
		= ("\n" "s" "\n" "---" "\n") ("-" "="  0)


styleName	: style -> identifier
styleName((_ h _ _ _) _)
		= h
styleName((_ h "(" _ ")" _ _ _) _)
		= h


findProperty	: properties -> identifier -> mvalue
findProperty((key "=" value:property) _ _, key)
		= value
findProperty((key ":" value) _ _, _)
		= !error:value("Non-normalized input")
findProperty(p nl (props:properties), key)
		= findProperty(props, key)
findProperty(key ":" value, _)
		= !error:value("Non-normalized input")
findProperty(key "=" value, key)
		= value
findProperty(_, key)
		= "?"


findPropertyInDefaults	: defaultsSect -> identifier -> mvalue
findPropertyInDefaults(_ (p:properties) _, key)
		= findProperty(p, key)
findPropertyInDefaults((nls:nls), key)
		= "?" 



findConstant	: constants -> identifier -> value
findConstant((key "=" value) _ _, key)
		= value
findConstant(cons _ (constants:constants), key)
		= findConstant(constants, key)
findConstant(key "=" value, key)
		= value
findConstant(_, key)
		= !error:value("Constant not found: ", key)

