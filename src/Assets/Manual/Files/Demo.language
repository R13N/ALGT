 Demo
******

 Syntax
========

 int	::= Number
 var	::= Identifier
 term	::= int | "(" "\\" var ":" type "." expr ")"
 expr	::= term "+" expr | term expr | term


 typeTerm	::= "Int" | "(" type ")"
 type		::= typeTerm "->" type | typeTerm


 Functions
===========


dom		: type -> type
dom("(" T ")")	= T
dom(T1 "->" T2)	= T1
dom("Int")	= !error("Undefined")

cod		: type -> type
cod("(" T ")")	= T
cod(T1 "->" T2)	= T2
cod("Int")	= !error("Undefined")




 Relations
===========

(→) : expr (in), expr (out)	Pronounced as "Smallstep"
(→*) : expr (in), expr (out)	Pronounced as "Bigstep"

 Rules
=======


  i0:int	i1:int
 --------------------------- [EvalPlus]
  i0 "+" i1 → !plus(i0, i1)



  -------------------------------------------------------------------- [EvalApp]
   ("(" "\\" x ":" TArg "." expr ")") arg → !subs:expr(x, arg, expr)


  expr0 → expr1
 --------------------------- [EvalCtx]
  expr[expr0] → expr[expr1]
 




 i:int
--------- [BigStep Base]
 i →* i


 e0 → e1	e1 →* e2
--------------------------
 e0 →* e2
 



