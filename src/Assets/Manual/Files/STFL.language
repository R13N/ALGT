 
 STFL 
******

# A Simply Typed Functional Language

 Syntax
========

basetype::= "Bool" | "Int" | "(" type ")"
type	::= basetype "->" type | basetype

bool	::= "True" | "False"
int	::= Number
var	::= Identifier

expr	::= term "+" expr
	| term expr
	| term


term	::= "If" expr "Then" expr "Else" expr
	| "(" "\\" var ":" type "." expr ")"
	| bool
	| int
	| var



 Functions
===========


domain 				: type -> type
domain("(" T ")")		= domain(T)
domain(("(" T1 ")") "->" T2)	= T1
domain(T1 "->" T2)		= T1

codomain 			: type -> type
codomain("(" T ")")		= codomain(T)
codomain(T1"->" ("(" T2 ")")) 	= T2
codomain(T1 "->" T2)		= T2
